mov    %rax,-0x8(%rbp)
xor    %eax,%eax
mov    -0xb0(%rbp),%rdx
lea    -0x90(%rbp),%rax
mov    %rdx,%r8
lea    0x1431(%rip),%rdx        # 0x5555555570b3
mov    %rdx,%rcx
lea    0x1431(%rip),%rdx        # 0x5555555570bd
mov    $0x80,%esi
mov    %rax,%rdi
mov    $0x0,%eax
call   0x555555555160 <snprintf@plt>
endbr64 
bnd jmp *0x3e3d(%rip)        # 0x555555558fa8 <snprintf@got.plt>
endbr64 
sub    $0xd8,%rsp
mov    %rcx,0x38(%rsp)
mov    %r8,0x40(%rsp)
mov    %r9,0x48(%rsp)
test   %al,%al
je     0x7ffff7c60815 <__GI___snprintf+85>
mov    %fs:0x28,%rax
mov    %rax,0x18(%rsp)
xor    %eax,%eax
lea    0xe0(%rsp),%rax
xor    %r8d,%r8d
mov    %rsp,%rcx
mov    %rax,0x8(%rsp)
lea    0x20(%rsp),%rax
movl   $0x18,(%rsp)
movl   $0x30,0x4(%rsp)
mov    %rax,0x10(%rsp)
call   0x7ffff7c883f0 <__vsnprintf_internal>
endbr64 
push   %r15
mov    %rcx,%r15
push   %r14
mov    %rdx,%r14
push   %r13
push   %r12
push   %rbp
push   %rbx
mov    %r8d,%ebx
sub    $0x158,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x148(%rsp)
xor    %eax,%eax
movq   $0x0,0x98(%rsp)
test   %rsi,%rsi
je     0x7ffff7c884d8 <__vsnprintf_internal+232>
mov    %rdi,%rbp
lea    -0x1(%rsi),%r12
lea    0x100(%rsp),%r9
lea    0x10(%rsp),%r13
xor    %r8d,%r8d
xor    %ecx,%ecx
mov    $0xffffffff,%edx
mov    $0x8000,%esi
mov    %r13,%rdi
mov    %r9,0x8(%rsp)
call   0x7ffff7c8e650 <_IO_no_init>
endbr64 
push   %r13
mov    %r8,%r13
push   %r12
mov    %edx,%r12d
push   %rbp
mov    %rdi,%rbp
push   %rbx
mov    %rcx,%rbx
sub    $0x8,%rsp
call   0x7ffff7c8e5e0 <_IO_old_init>
endbr64 
mov    0x18e452(%rip),%edx        # 0x7ffff7e1ca3c <stdio_needs_locking>
or     $0xfbad0000,%esi
xor    %eax,%eax
pxor   %xmm0,%xmm0
mov    %esi,(%rdi)
test   %edx,%edx
movq   $0x0,0x68(%rdi)
setne  %al
xor    %ecx,%ecx
movups %xmm0,0x8(%rdi)
shl    $0x7,%eax
mov    %cx,0x80(%rdi)
mov    %eax,0x74(%rdi)
mov    0x88(%rdi),%rax
movups %xmm0,0x18(%rdi)
movups %xmm0,0x28(%rdi)
movups %xmm0,0x38(%rdi)
movups %xmm0,0x48(%rdi)
movups %xmm0,0x58(%rdi)
test   %rax,%rax
je     0x7ffff7c8e647 <_IO_old_init+103>
ret    
mov    %r12d,0xc0(%rbp)
test   %r12d,%r12d
js     0x7ffff7c8e6c0 <_IO_no_init+112>
movq   $0xffffffffffffffff,0xa0(%rbp)
jmp    0x7ffff7c8e6a8 <_IO_no_init+88>
movq   $0x0,0xa8(%rbp)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    %rbp,%rcx
mov    %r12,%rdx
mov    %rbp,%rsi
lea    0x18ee8a(%rip),%rax        # 0x7ffff7e17300 <_IO_strn_jumps>
mov    %r13,%rdi
mov    %rax,0xe8(%rsp)
movb   $0x0,0x0(%rbp)
call   0x7ffff7c8f9b0 <_IO_str_init_static_internal>
endbr64 
push   %r14
movq   %rsi,%xmm1
mov    %rdi,%r14
push   %r13
punpcklqdq %xmm1,%xmm1
mov    %rsi,%r13
push   %r12
mov    %rcx,%r12
push   %rbp
push   %rbx
mov    %rsi,%rbx
sub    $0x10,%rsp
movaps %xmm1,(%rsp)
test   %rdx,%rdx
jne    0x7ffff7c8fa50 <_IO_str_init_static_internal+160>
add    %rsi,%rdx
mov    $0xffffffffffffffff,%rax
cmp    %rdx,%rsi
cmovb  %rdx,%rax
mov    %rax,%rbp
jmp    0x7ffff7c8f9eb <_IO_str_init_static_internal+59>
xor    %ecx,%ecx
mov    %rbp,%rdx
mov    %rbx,%rsi
mov    %r14,%rdi
call   0x7ffff7c8dc20 <__GI__IO_setb>
endbr64 
push   %rbp
movq   %rsi,%xmm0
movq   %rdx,%xmm1
mov    %ecx,%ebp
push   %rbx
mov    %rdi,%rbx
punpcklqdq %xmm1,%xmm0
sub    $0x18,%rsp
mov    0x38(%rdi),%rdi
mov    (%rbx),%eax
test   %rdi,%rdi
je     0x7ffff7c8dc4c <__GI__IO_setb+44>
mov    %eax,%edx
or     $0x1,%eax
movups %xmm0,0x38(%rbx)
and    $0xfffffffe,%edx
test   %ebp,%ebp
cmovne %edx,%eax
mov    %eax,(%rbx)
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
test   %r12,%r12
je     0x7ffff7c8fa70 <_IO_str_init_static_internal+192>
mov    %r12,%rbx
movq   %r13,%xmm0
movq   %r12,%xmm2
movdqa (%rsp),%xmm3
movq   %rbp,%xmm4
movq   $0x0,0xe0(%r14)
punpcklqdq %xmm2,%xmm0
movups %xmm0,0x8(%r14)
movq   %rbx,%xmm0
punpcklqdq %xmm4,%xmm0
movups %xmm3,0x18(%r14)
movups %xmm0,0x28(%r14)
add    $0x10,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
ret    
mov    %ebx,%ecx
mov    %r15,%rdx
mov    %r14,%rsi
mov    %r13,%rdi
call   0x7ffff7c75030 <__vfprintf_internal>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x538,%rsp
mov    %rsi,0x8(%rsp)
mov    %rdx,0x20(%rsp)
mov    %ecx,0x7c(%rsp)
mov    %fs:0x28,%rax
mov    %rax,0x528(%rsp)
mov    0x1a4da2(%rip),%rax        # 0x7ffff7e19e10
mov    %fs:(%rax),%eax
mov    %eax,0x90(%rsp)
mov    0xc0(%rdi),%eax
test   %eax,%eax
jne    0x7ffff7c75500 <__vfprintf_internal+1232>
cmp    $0xffffffff,%eax
je     0x7ffff7c75090 <__vfprintf_internal+96>
mov    0x0(%rbp),%ebx
test   $0x8,%bl
jne    0x7ffff7c77380 <__vfprintf_internal+9040>
cmpq   $0x0,0x8(%rsp)
je     0x7ffff7c77440 <__vfprintf_internal+9232>
test   $0x2,%bl
jne    0x7ffff7c76620 <__vfprintf_internal+5616>
mov    0x20(%rsp),%rax
mov    0x8(%rsp),%rdi
mov    $0x25,%esi
movdqu (%rax),%xmm1
movups %xmm1,0x118(%rsp)
mov    0x10(%rax),%rax
movaps %xmm1,0x10(%rsp)
mov    %rax,0x128(%rsp)
call   0x7ffff7c284d0 <*ABS*+0xab010@plt>
endbr64 
bnd jmp *0x1f1bdd(%rip)        # 0x7ffff7e1a0b8 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d5d0 <__strchrnul_avx2+464>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d4a0 <__strchrnul_avx2+160>
tzcnt  %eax,%eax
add    %rdi,%rax
vzeroupper 
ret    
mov    %rbp,0xf8(%rsp)
mov    %rax,0x68(%rsp)
movb   $0x0,0xa6(%rsp)
and    $0x80,%bh
je     0x7ffff7c75518 <__vfprintf_internal+1256>
mov    0xd8(%rbp),%r12
lea    0x1a265a(%rip),%rax        # 0x7ffff7e17768
mov    0x68(%rsp),%rbx
lea    0x1a18e6(%rip),%rcx        # 0x7ffff7e16a00 <_IO_helper_jumps>
sub    0x1a36f7(%rip),%rax        # 0x7ffff7e18818
sub    0x8(%rsp),%rbx
mov    %rax,0x30(%rsp)
mov    %rax,%rdi
mov    %r12,%rax
sub    %rcx,%rax
cmp    %rax,%rdi
jbe    0x7ffff7c769d0 <__vfprintf_internal+6560>
mov    0x8(%rsp),%rsi
mov    %rbx,%rdx
mov    %rbp,%rdi
call   *0x38(%r12)
endbr64 
test   %rdx,%rdx
je     0x7ffff7c8dfa0 <__GI__IO_default_xsputn+480>
xor    %eax,%eax
ret    
cmp    %rax,%rbx
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %ebx,%rdx
mov    %rbx,%rax
mov    %ebx,%r12d
shr    $0x3f,%rax
cmp    %rdx,%rbx
mov    $0x1,%edx
cmovne %edx,%eax
test   %eax,%eax
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %ebx,%ebx
js     0x7ffff7c7533d <__vfprintf_internal+781>
mov    0x68(%rsp),%r13
cmpb   $0x0,0x0(%r13)
je     0x7ffff7c7533d <__vfprintf_internal+781>
mov    0x1a7833(%rip),%rbx        # 0x7ffff7e1c9c8 <__printf_function_table>
mov    %rbx,0x98(%rsp)
test   %rbx,%rbx
jne    0x7ffff7c77128 <__vfprintf_internal+8440>
cmpq   $0x0,0x1a782a(%rip)        # 0x7ffff7e1c9d8 <__printf_modifier_table>
jne    0x7ffff7c752c8 <__vfprintf_internal+664>
cmpq   $0x0,0x1a66fc(%rip)        # 0x7ffff7e1b8b8 <__printf_va_arg_table>
jne    0x7ffff7c752c8 <__vfprintf_internal+664>
mov    0x7c(%rsp),%eax
movl   $0x0,0xa0(%rsp)
movl   $0x0,0x78(%rsp)
movq   $0xffffffffffffffff,0x80(%rsp)
mov    %eax,%ebx
and    $0x1,%ebx
mov    %bl,0xa7(%rsp)
mov    %eax,%ebx
and    $0x2,%eax
and    $0x8,%ebx
mov    %eax,0xa8(%rsp)
mov    %ebx,0xac(%rsp)
nopw   0x0(%rax,%rax,1)
lea    0x1(%r13),%rbx
movzbl 0x1(%r13),%r13d
lea    0x550(%rip),%rsi        # 0x7ffff7c75770 <__vfprintf_internal+1856>
lea    -0x20(%r13),%eax
cmp    $0x5a,%al
ja     0x7ffff7c75251 <__vfprintf_internal+545>
movsbl %r13b,%eax
lea    0x15c4ad(%rip),%rdx        # 0x7ffff7dd16e0 <jump_table>
lea    0x15c426(%rip),%rdi        # 0x7ffff7dd1660 <step0_jumps.9>
sub    $0x20,%eax
cltq   
movzbl (%rdx,%rax,1),%eax
movslq (%rdi,%rax,4),%rsi
lea    0x522(%rip),%rax        # 0x7ffff7c75770 <__vfprintf_internal+1856>
add    %rax,%rsi
mov    0x1a4d18(%rip),%rax        # 0x7ffff7e19f70
xor    %r11d,%r11d
xor    %r10d,%r10d
xor    %r15d,%r15d
xor    %edx,%edx
mov    $0xffffffff,%r14d
lea    0x15c1f0(%rip),%r8        # 0x7ffff7dd1460 <step4_jumps.5>
mov    $0x7fffffff,%r9d
mov    %fs:(%rax),%rax
movl   $0x0,0x5c(%rsp)
movl   $0x0,0x10(%rsp)
mov    %rax,0x60(%rsp)
lea    0x15c44a(%rip),%rax        # 0x7ffff7dd16e0 <jump_table>
movl   $0x0,0x50(%rsp)
movl   $0x0,0x40(%rsp)
movl   $0x0,0x28(%rsp)
movl   $0x0,0x58(%rsp)
movl   $0x0,0x4c(%rsp)
movb   $0x20,0x38(%rsp)
jmp    *%rsi
endbr64 
mov    0x20(%rsp),%rdi
mov    (%rdi),%eax
cmp    $0x2f,%eax
ja     0x7ffff7c76c18 <__vfprintf_internal+7144>
mov    %eax,%edx
add    $0x8,%eax
add    0x10(%rdi),%rdx
mov    %eax,(%rdi)
mov    (%rdx),%r15
mov    %r10d,%eax
xor    $0x1,%eax
test   %r15,%r15
jne    0x7ffff7c758af <__vfprintf_internal+2175>
cmp    $0x53,%r13b
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
test   %al,%al
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
cmp    $0xffffffff,%r14d
je     0x7ffff7c76d29 <__vfprintf_internal+7417>
mov    %r15,%rdi
call   0x7ffff7c28490 <*ABS*+0xa86a0@plt>
endbr64 
bnd jmp *0x1f1bfd(%rip)        # 0x7ffff7e1a098 <*ABS*@got.plt>
endbr64 
mov    %edi,%eax
mov    %rdi,%rdx
vpxor  %xmm0,%xmm0,%xmm0
and    $0xfff,%eax
cmp    $0xfe0,%eax
ja     0x7ffff7d9d930 <__strlen_avx2+336>
vpcmpeqb (%rdi),%ymm0,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d860 <__strlen_avx2+128>
tzcnt  %eax,%eax
vzeroupper 
ret    
mov    %rax,%r14
jmp    0x7ffff7c758d9 <__vfprintf_internal+2217>
mov    0x10(%rsp),%r13d
sub    %eax,%r13d
js     0x7ffff7c76fe0 <__vfprintf_internal+8112>
mov    0xd8(%rbp),%r13
lea    0x19fa12(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %r13,%rax
sub    %rdx,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c77459 <__vfprintf_internal+9257>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%r13)
endbr64 
test   %rdx,%rdx
je     0x7ffff7c8dfa0 <__GI__IO_default_xsputn+480>
push   %r15
mov    %rsi,%rcx
mov    %rdi,%r15
push   %r14
mov    %rdx,%r14
push   %r13
mov    %rdx,%r13
push   %r12
lea    0x188c18(%rip),%r12        # 0x7ffff7e16a00 <_IO_helper_jumps>
push   %rbp
lea    0x189978(%rip),%rbp        # 0x7ffff7e17768
push   %rbx
sub    %r12,%rbp
sub    $0x18,%rsp
jmp    0x7ffff7c8de40 <__GI__IO_default_xsputn+128>
mov    0x28(%r15),%rdi
mov    0x30(%r15),%rbx
cmp    %rbx,%rdi
jae    0x7ffff7c8de0c <__GI__IO_default_xsputn+76>
sub    %rdi,%rbx
cmp    %r14,%rbx
cmova  %r14,%rbx
cmp    $0x14,%rbx
jbe    0x7ffff7c8de00 <__GI__IO_default_xsputn+64>
test   %rbx,%rbx
jne    0x7ffff7c8dec8 <__GI__IO_default_xsputn+264>
lea    0x1(%rcx),%rsi
mov    %rdi,%rdx
lea    -0x1(%rbx),%rax
sub    %rsi,%rdx
cmp    $0xe,%rdx
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
cmp    $0x6,%rax
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
cmp    $0xe,%rax
jbe    0x7ffff7c8df7a <__GI__IO_default_xsputn+442>
mov    (%rcx),%rax
lea    0x8(%rcx),%rdx
lea    -0x9(%rbx),%rsi
mov    %rax,(%rdi)
lea    0x8(%rdi),%rax
cmp    $0x8,%rbx
jne    0x7ffff7c8df0d <__GI__IO_default_xsputn+333>
movzbl (%rdx),%r8d
mov    %r8b,(%rax)
test   %rsi,%rsi
je     0x7ffff7c8df6b <__GI__IO_default_xsputn+427>
add    %rbx,%rdi
add    %rbx,%rcx
mov    %rdi,0x28(%r15)
jmp    0x7ffff7c8de09 <__GI__IO_default_xsputn+73>
sub    %rbx,%r14
test   %r14,%r14
je     0x7ffff7c8deb3 <__GI__IO_default_xsputn+243>
add    $0x18,%rsp
mov    %r13,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77028 <__vfprintf_internal+8184>
cmp    %r14,%rax
jae    0x7ffff7c75cc9 <__vfprintf_internal+3225>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
jns    0x7ffff7c75f80 <__vfprintf_internal+3920>
lea    0x1(%rbx),%r15
mov    $0x25,%esi
addl   $0x1,0x78(%rsp)
mov    %r15,%rdi
call   0x7ffff7c284d0 <*ABS*+0xab010@plt>
endbr64 
bnd jmp *0x1f1bdd(%rip)        # 0x7ffff7e1a0b8 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d5d0 <__strchrnul_avx2+464>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d4a0 <__strchrnul_avx2+160>
tzcnt  %eax,%eax
add    %rdi,%rax
vzeroupper 
ret    
mov    0xd8(%rbp),%rbx
lea    0x1a0a5c(%rip),%rdi        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %rax,%r14
mov    %rax,%r13
mov    %rbx,%rax
sub    %r15,%r14
sub    %rdi,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c76770 <__vfprintf_internal+5952>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%rbx)
endbr64 
test   %rdx,%rdx
je     0x7ffff7c8dfa0 <__GI__IO_default_xsputn+480>
xor    %eax,%eax
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77500 <__vfprintf_internal+9424>
cmp    %r14,%rax
jb     0x7ffff7c77500 <__vfprintf_internal+9424>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
js     0x7ffff7c7533d <__vfprintf_internal+781>
cmpb   $0x0,0x0(%r13)
jne    0x7ffff7c75210 <__vfprintf_internal+480>
lea    0x1(%r13),%rbx
movzbl 0x1(%r13),%r13d
lea    0x550(%rip),%rsi        # 0x7ffff7c75770 <__vfprintf_internal+1856>
lea    -0x20(%r13),%eax
cmp    $0x5a,%al
ja     0x7ffff7c75251 <__vfprintf_internal+545>
movsbl %r13b,%eax
lea    0x15c4ad(%rip),%rdx        # 0x7ffff7dd16e0 <jump_table>
lea    0x15c426(%rip),%rdi        # 0x7ffff7dd1660 <step0_jumps.9>
sub    $0x20,%eax
cltq   
movzbl (%rdx,%rax,1),%eax
movslq (%rdi,%rax,4),%rsi
lea    0x522(%rip),%rax        # 0x7ffff7c75770 <__vfprintf_internal+1856>
add    %rax,%rsi
mov    0x1a4d18(%rip),%rax        # 0x7ffff7e19f70
xor    %r11d,%r11d
xor    %r10d,%r10d
xor    %r15d,%r15d
xor    %edx,%edx
mov    $0xffffffff,%r14d
lea    0x15c1f0(%rip),%r8        # 0x7ffff7dd1460 <step4_jumps.5>
mov    $0x7fffffff,%r9d
mov    %fs:(%rax),%rax
movl   $0x0,0x5c(%rsp)
movl   $0x0,0x10(%rsp)
mov    %rax,0x60(%rsp)
lea    0x15c44a(%rip),%rax        # 0x7ffff7dd16e0 <jump_table>
movl   $0x0,0x50(%rsp)
movl   $0x0,0x40(%rsp)
movl   $0x0,0x28(%rsp)
movl   $0x0,0x58(%rsp)
movl   $0x0,0x4c(%rsp)
movb   $0x20,0x38(%rsp)
jmp    *%rsi
endbr64 
mov    0x20(%rsp),%rdi
mov    (%rdi),%eax
cmp    $0x2f,%eax
ja     0x7ffff7c76c18 <__vfprintf_internal+7144>
mov    %eax,%edx
add    $0x8,%eax
add    0x10(%rdi),%rdx
mov    %eax,(%rdi)
mov    (%rdx),%r15
mov    %r10d,%eax
xor    $0x1,%eax
test   %r15,%r15
jne    0x7ffff7c758af <__vfprintf_internal+2175>
cmp    $0x53,%r13b
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
test   %al,%al
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
cmp    $0xffffffff,%r14d
je     0x7ffff7c76d29 <__vfprintf_internal+7417>
mov    %r15,%rdi
call   0x7ffff7c28490 <*ABS*+0xa86a0@plt>
endbr64 
bnd jmp *0x1f1bfd(%rip)        # 0x7ffff7e1a098 <*ABS*@got.plt>
endbr64 
mov    %edi,%eax
mov    %rdi,%rdx
vpxor  %xmm0,%xmm0,%xmm0
and    $0xfff,%eax
cmp    $0xfe0,%eax
ja     0x7ffff7d9d930 <__strlen_avx2+336>
vpcmpeqb (%rdi),%ymm0,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d860 <__strlen_avx2+128>
tzcnt  %eax,%eax
vzeroupper 
ret    
mov    %rax,%r14
jmp    0x7ffff7c758d9 <__vfprintf_internal+2217>
mov    0x10(%rsp),%r13d
sub    %eax,%r13d
js     0x7ffff7c76fe0 <__vfprintf_internal+8112>
mov    0xd8(%rbp),%r13
lea    0x19fa12(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %r13,%rax
sub    %rdx,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c77459 <__vfprintf_internal+9257>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%r13)
endbr64 
test   %rdx,%rdx
je     0x7ffff7c8dfa0 <__GI__IO_default_xsputn+480>
push   %r15
mov    %rsi,%rcx
mov    %rdi,%r15
push   %r14
mov    %rdx,%r14
push   %r13
mov    %rdx,%r13
push   %r12
lea    0x188c18(%rip),%r12        # 0x7ffff7e16a00 <_IO_helper_jumps>
push   %rbp
lea    0x189978(%rip),%rbp        # 0x7ffff7e17768
push   %rbx
sub    %r12,%rbp
sub    $0x18,%rsp
jmp    0x7ffff7c8de40 <__GI__IO_default_xsputn+128>
mov    0x28(%r15),%rdi
mov    0x30(%r15),%rbx
cmp    %rbx,%rdi
jae    0x7ffff7c8de0c <__GI__IO_default_xsputn+76>
sub    %rdi,%rbx
cmp    %r14,%rbx
cmova  %r14,%rbx
cmp    $0x14,%rbx
jbe    0x7ffff7c8de00 <__GI__IO_default_xsputn+64>
test   %rbx,%rbx
jne    0x7ffff7c8dec8 <__GI__IO_default_xsputn+264>
lea    0x1(%rcx),%rsi
mov    %rdi,%rdx
lea    -0x1(%rbx),%rax
sub    %rsi,%rdx
cmp    $0xe,%rdx
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
cmp    $0x6,%rax
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
cmp    $0xe,%rax
jbe    0x7ffff7c8df7a <__GI__IO_default_xsputn+442>
mov    (%rcx),%rax
lea    0x8(%rcx),%rdx
lea    -0x9(%rbx),%rsi
mov    %rax,(%rdi)
lea    0x8(%rdi),%rax
cmp    $0x8,%rbx
jne    0x7ffff7c8df0d <__GI__IO_default_xsputn+333>
movzbl (%rdx),%r8d
mov    %r8b,(%rax)
test   %rsi,%rsi
je     0x7ffff7c8df6b <__GI__IO_default_xsputn+427>
movzbl 0x1(%rdx),%r8d
mov    %r8b,0x1(%rax)
cmp    $0x1,%rsi
je     0x7ffff7c8df6b <__GI__IO_default_xsputn+427>
add    %rbx,%rdi
add    %rbx,%rcx
mov    %rdi,0x28(%r15)
jmp    0x7ffff7c8de09 <__GI__IO_default_xsputn+73>
sub    %rbx,%r14
test   %r14,%r14
je     0x7ffff7c8deb3 <__GI__IO_default_xsputn+243>
add    $0x18,%rsp
mov    %r13,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77028 <__vfprintf_internal+8184>
cmp    %r14,%rax
jae    0x7ffff7c75cc9 <__vfprintf_internal+3225>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
jns    0x7ffff7c75f80 <__vfprintf_internal+3920>
lea    0x1(%rbx),%r15
mov    $0x25,%esi
addl   $0x1,0x78(%rsp)
mov    %r15,%rdi
call   0x7ffff7c284d0 <*ABS*+0xab010@plt>
endbr64 
bnd jmp *0x1f1bdd(%rip)        # 0x7ffff7e1a0b8 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d5d0 <__strchrnul_avx2+464>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d4a0 <__strchrnul_avx2+160>
tzcnt  %eax,%eax
add    %rdi,%rax
vzeroupper 
ret    
mov    0xd8(%rbp),%rbx
lea    0x1a0a5c(%rip),%rdi        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %rax,%r14
mov    %rax,%r13
mov    %rbx,%rax
sub    %r15,%r14
sub    %rdi,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c76770 <__vfprintf_internal+5952>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%rbx)
endbr64 
test   %rdx,%rdx
je     0x7ffff7c8dfa0 <__GI__IO_default_xsputn+480>
push   %r15
mov    %rsi,%rcx
mov    %rdi,%r15
push   %r14
mov    %rdx,%r14
push   %r13
mov    %rdx,%r13
push   %r12
lea    0x188c18(%rip),%r12        # 0x7ffff7e16a00 <_IO_helper_jumps>
push   %rbp
lea    0x189978(%rip),%rbp        # 0x7ffff7e17768
push   %rbx
sub    %r12,%rbp
sub    $0x18,%rsp
jmp    0x7ffff7c8de40 <__GI__IO_default_xsputn+128>
mov    0x28(%r15),%rdi
mov    0x30(%r15),%rbx
cmp    %rbx,%rdi
jae    0x7ffff7c8de0c <__GI__IO_default_xsputn+76>
sub    %rdi,%rbx
cmp    %r14,%rbx
cmova  %r14,%rbx
cmp    $0x14,%rbx
jbe    0x7ffff7c8de00 <__GI__IO_default_xsputn+64>
test   %rbx,%rbx
jne    0x7ffff7c8dec8 <__GI__IO_default_xsputn+264>
lea    0x1(%rcx),%rsi
mov    %rdi,%rdx
lea    -0x1(%rbx),%rax
sub    %rsi,%rdx
cmp    $0xe,%rdx
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
cmp    $0x6,%rax
jbe    0x7ffff7c8dfa8 <__GI__IO_default_xsputn+488>
xor    %eax,%eax
nopw   0x0(%rax,%rax,1)
movzbl (%rcx,%rax,1),%edx
mov    %dl,(%rdi,%rax,1)
add    $0x1,%rax
cmp    %rbx,%rax
jne    0x7ffff7c8dfb0 <__GI__IO_default_xsputn+496>
movzbl (%rcx,%rax,1),%edx
mov    %dl,(%rdi,%rax,1)
add    $0x1,%rax
cmp    %rbx,%rax
jne    0x7ffff7c8dfb0 <__GI__IO_default_xsputn+496>
movzbl (%rcx,%rax,1),%edx
mov    %dl,(%rdi,%rax,1)
add    $0x1,%rax
cmp    %rbx,%rax
jne    0x7ffff7c8dfb0 <__GI__IO_default_xsputn+496>
movzbl (%rcx,%rax,1),%edx
mov    %dl,(%rdi,%rax,1)
add    $0x1,%rax
cmp    %rbx,%rax
jne    0x7ffff7c8dfb0 <__GI__IO_default_xsputn+496>
jmp    0x7ffff7c8df6b <__GI__IO_default_xsputn+427>
add    %rbx,%rdi
add    %rbx,%rcx
mov    %rdi,0x28(%r15)
jmp    0x7ffff7c8de09 <__GI__IO_default_xsputn+73>
sub    %rbx,%r14
test   %r14,%r14
je     0x7ffff7c8deb3 <__GI__IO_default_xsputn+243>
add    $0x18,%rsp
mov    %r13,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77500 <__vfprintf_internal+9424>
cmp    %r14,%rax
jb     0x7ffff7c77500 <__vfprintf_internal+9424>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
js     0x7ffff7c7533d <__vfprintf_internal+781>
cmpb   $0x0,0x0(%r13)
jne    0x7ffff7c75210 <__vfprintf_internal+480>
jmp    0x7ffff7c7533d <__vfprintf_internal+781>
testl  $0x8000,0x0(%rbp)
je     0x7ffff7c75380 <__vfprintf_internal+848>
cmpb   $0x0,0xa6(%rsp)
jne    0x7ffff7c75588 <__vfprintf_internal+1368>
mov    0x528(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c7750a <__vfprintf_internal+9434>
add    $0x538,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    0x8(%rsp),%r9
cmp    %r9,0x48(%rsp)
je     0x7ffff7c884ae <__vsnprintf_internal+190>
mov    0x38(%rsp),%rdx
movb   $0x0,(%rdx)
mov    0x148(%rsp),%rdx
sub    %fs:0x28,%rdx
jne    0x7ffff7c884ee <__vsnprintf_internal+254>
add    $0x158,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    0x18(%rsp),%rdx
sub    %fs:0x28,%rdx
jne    0x7ffff7c6086e <__GI___snprintf+174>
add    $0xd8,%rsp
ret    
lea    -0x90(%rbp),%rax
mov    %rax,%rsi
lea    0x1419(%rip),%rax        # 0x5555555570c8
mov    %rax,%rdi
mov    $0x0,%eax
call   0x555555555150 <printf@plt>
endbr64 
bnd jmp *0x3e45(%rip)        # 0x555555558fa0 <printf@got.plt>
endbr64 
sub    $0xd8,%rsp
mov    %rdi,%r10
mov    %rsi,0x28(%rsp)
mov    %rdx,0x30(%rsp)
mov    %rcx,0x38(%rsp)
mov    %r8,0x40(%rsp)
mov    %r9,0x48(%rsp)
test   %al,%al
je     0x7ffff7c60752 <__printf+98>
mov    %fs:0x28,%rax
mov    %rax,0x18(%rsp)
xor    %eax,%eax
lea    0xe0(%rsp),%rax
mov    %rsp,%rdx
xor    %ecx,%ecx
mov    %rax,0x8(%rsp)
lea    0x20(%rsp),%rax
mov    %r10,%rsi
mov    %rax,0x10(%rsp)
mov    0x1b96b0(%rip),%rax        # 0x7ffff7e19e38
movl   $0x8,(%rsp)
mov    (%rax),%rdi
movl   $0x30,0x4(%rsp)
call   0x7ffff7c75030 <__vfprintf_internal>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x538,%rsp
mov    %rsi,0x8(%rsp)
mov    %rdx,0x20(%rsp)
mov    %ecx,0x7c(%rsp)
mov    %fs:0x28,%rax
mov    %rax,0x528(%rsp)
mov    0x1a4da2(%rip),%rax        # 0x7ffff7e19e10
mov    %fs:(%rax),%eax
mov    %eax,0x90(%rsp)
mov    0xc0(%rdi),%eax
test   %eax,%eax
jne    0x7ffff7c75500 <__vfprintf_internal+1232>
cmp    $0xffffffff,%eax
je     0x7ffff7c75090 <__vfprintf_internal+96>
mov    0x0(%rbp),%ebx
test   $0x8,%bl
jne    0x7ffff7c77380 <__vfprintf_internal+9040>
cmpq   $0x0,0x8(%rsp)
je     0x7ffff7c77440 <__vfprintf_internal+9232>
test   $0x2,%bl
jne    0x7ffff7c76620 <__vfprintf_internal+5616>
mov    0x20(%rsp),%rax
mov    0x8(%rsp),%rdi
mov    $0x25,%esi
movdqu (%rax),%xmm1
movups %xmm1,0x118(%rsp)
mov    0x10(%rax),%rax
movaps %xmm1,0x10(%rsp)
mov    %rax,0x128(%rsp)
call   0x7ffff7c284d0 <*ABS*+0xab010@plt>
endbr64 
bnd jmp *0x1f1bdd(%rip)        # 0x7ffff7e1a0b8 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d5d0 <__strchrnul_avx2+464>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d4a0 <__strchrnul_avx2+160>
tzcnt  %eax,%eax
add    %rdi,%rax
vzeroupper 
ret    
mov    %rbp,0xf8(%rsp)
mov    %rax,0x68(%rsp)
movb   $0x0,0xa6(%rsp)
and    $0x80,%bh
je     0x7ffff7c75518 <__vfprintf_internal+1256>
mov    0x1a4a21(%rip),%rax        # 0x7ffff7e19f40
lea    0xf0(%rsp),%rdi
mov    %rax,0xf0(%rsp)
call   0x7ffff7c911c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    0x0(%rbp),%eax
and    $0x8000,%eax
jne    0x7ffff7c77590 <__vfprintf_internal+9568>
mov    %fs:0x10,%rbx
mov    0x88(%rbp),%rdi
cmp    %rbx,0x8(%rdi)
je     0x7ffff7c75572 <__vfprintf_internal+1346>
mov    $0x1,%edx
lock cmpxchg %edx,(%rdi)
jne    0x7ffff7c76ee0 <__vfprintf_internal+7856>
mov    0x88(%rbp),%rdi
mov    %rbx,0x8(%rdi)
addl   $0x1,0x4(%rdi)
movb   $0x1,0xa6(%rsp)
jmp    0x7ffff7c75100 <__vfprintf_internal+208>
mov    0xd8(%rbp),%r12
lea    0x1a265a(%rip),%rax        # 0x7ffff7e17768
mov    0x68(%rsp),%rbx
lea    0x1a18e6(%rip),%rcx        # 0x7ffff7e16a00 <_IO_helper_jumps>
sub    0x1a36f7(%rip),%rax        # 0x7ffff7e18818
sub    0x8(%rsp),%rbx
mov    %rax,0x30(%rsp)
mov    %rax,%rdi
mov    %r12,%rax
sub    %rcx,%rax
cmp    %rax,%rdi
jbe    0x7ffff7c769d0 <__vfprintf_internal+6560>
mov    0x8(%rsp),%rsi
mov    %rbx,%rdx
mov    %rbp,%rdi
call   *0x38(%r12)
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
xor    %r12d,%r12d
push   %rbp
push   %rbx
sub    $0x18,%rsp
test   %rdx,%rdx
je     0x7ffff7c8b66e <_IO_new_file_xsputn+110>
mov    %rdi,%rbp
mov    %rsi,%r13
mov    0x28(%rdi),%rdi
mov    %rdx,%rbx
mov    0x0(%rbp),%eax
and    $0xa00,%eax
cmp    $0xa00,%eax
je     0x7ffff7c8b680 <_IO_new_file_xsputn+128>
mov    0x30(%rbp),%r12
cmp    %rdi,%r12
jbe    0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
sub    %rdi,%r12
xor    %r14d,%r14d
test   %r12,%r12
je     0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
cmp    %rbx,%r12
mov    %r13,%rsi
mov    %rbx,%r15
cmova  %rbx,%r12
mov    %r12,%rdx
add    %r12,%r13
sub    %r12,%r15
call   0x7ffff7c283e0 <*ABS*+0xa97d0@plt>
endbr64 
bnd jmp *0x1f1c55(%rip)        # 0x7ffff7e1a040 <*ABS*@got.plt>
endbr64 
mov    %rdi,%rax
add    %rdx,%rax
jmp    0x7ffff7da07c7 <__memmove_avx_unaligned_erms+7>
cmp    $0x20,%rdx
jb     0x7ffff7da07f0 <__memmove_avx_unaligned_erms+48>
cmp    $0x10,%edx
jae    0x7ffff7da0822 <__memmove_avx_unaligned_erms+98>
cmp    $0x8,%edx
jae    0x7ffff7da0840 <__memmove_avx_unaligned_erms+128>
mov    -0x8(%rsi,%rdx,1),%rcx
mov    (%rsi),%rsi
mov    %rsi,(%rdi)
mov    %rcx,-0x8(%rdi,%rdx,1)
ret    
mov    %rax,0x28(%rbp)
add    %r15,%r14
jne    0x7ffff7c8b6a3 <_IO_new_file_xsputn+163>
add    $0x18,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %rax,%rbx
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %ebx,%rdx
mov    %rbx,%rax
mov    %ebx,%r12d
shr    $0x3f,%rax
cmp    %rdx,%rbx
mov    $0x1,%edx
cmovne %edx,%eax
test   %eax,%eax
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %ebx,%ebx
js     0x7ffff7c7533d <__vfprintf_internal+781>
mov    0x68(%rsp),%r13
cmpb   $0x0,0x0(%r13)
je     0x7ffff7c7533d <__vfprintf_internal+781>
mov    0x1a7833(%rip),%rbx        # 0x7ffff7e1c9c8 <__printf_function_table>
mov    %rbx,0x98(%rsp)
test   %rbx,%rbx
jne    0x7ffff7c77128 <__vfprintf_internal+8440>
cmpq   $0x0,0x1a782a(%rip)        # 0x7ffff7e1c9d8 <__printf_modifier_table>
jne    0x7ffff7c752c8 <__vfprintf_internal+664>
cmpq   $0x0,0x1a66fc(%rip)        # 0x7ffff7e1b8b8 <__printf_va_arg_table>
jne    0x7ffff7c752c8 <__vfprintf_internal+664>
mov    0x7c(%rsp),%eax
movl   $0x0,0xa0(%rsp)
movl   $0x0,0x78(%rsp)
movq   $0xffffffffffffffff,0x80(%rsp)
mov    %eax,%ebx
and    $0x1,%ebx
mov    %bl,0xa7(%rsp)
mov    %eax,%ebx
and    $0x2,%eax
and    $0x8,%ebx
mov    %eax,0xa8(%rsp)
mov    %ebx,0xac(%rsp)
nopw   0x0(%rax,%rax,1)
lea    0x1(%r13),%rbx
movzbl 0x1(%r13),%r13d
lea    0x550(%rip),%rsi        # 0x7ffff7c75770 <__vfprintf_internal+1856>
lea    -0x20(%r13),%eax
cmp    $0x5a,%al
ja     0x7ffff7c75251 <__vfprintf_internal+545>
movsbl %r13b,%eax
lea    0x15c4ad(%rip),%rdx        # 0x7ffff7dd16e0 <jump_table>
lea    0x15c426(%rip),%rdi        # 0x7ffff7dd1660 <step0_jumps.9>
sub    $0x20,%eax
cltq   
movzbl (%rdx,%rax,1),%eax
movslq (%rdi,%rax,4),%rsi
lea    0x522(%rip),%rax        # 0x7ffff7c75770 <__vfprintf_internal+1856>
add    %rax,%rsi
mov    0x1a4d18(%rip),%rax        # 0x7ffff7e19f70
xor    %r11d,%r11d
xor    %r10d,%r10d
xor    %r15d,%r15d
xor    %edx,%edx
mov    $0xffffffff,%r14d
lea    0x15c1f0(%rip),%r8        # 0x7ffff7dd1460 <step4_jumps.5>
mov    $0x7fffffff,%r9d
mov    %fs:(%rax),%rax
movl   $0x0,0x5c(%rsp)
movl   $0x0,0x10(%rsp)
mov    %rax,0x60(%rsp)
lea    0x15c44a(%rip),%rax        # 0x7ffff7dd16e0 <jump_table>
movl   $0x0,0x50(%rsp)
movl   $0x0,0x40(%rsp)
movl   $0x0,0x28(%rsp)
movl   $0x0,0x58(%rsp)
movl   $0x0,0x4c(%rsp)
movb   $0x20,0x38(%rsp)
jmp    *%rsi
endbr64 
mov    0x20(%rsp),%rdi
mov    (%rdi),%eax
cmp    $0x2f,%eax
ja     0x7ffff7c76c18 <__vfprintf_internal+7144>
mov    %eax,%edx
add    $0x8,%eax
add    0x10(%rdi),%rdx
mov    %eax,(%rdi)
mov    (%rdx),%r15
mov    %r10d,%eax
xor    $0x1,%eax
test   %r15,%r15
jne    0x7ffff7c758af <__vfprintf_internal+2175>
cmp    $0x53,%r13b
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
test   %al,%al
je     0x7ffff7c76ca0 <__vfprintf_internal+7280>
cmp    $0xffffffff,%r14d
je     0x7ffff7c76d29 <__vfprintf_internal+7417>
mov    %r15,%rdi
call   0x7ffff7c28490 <*ABS*+0xa86a0@plt>
endbr64 
bnd jmp *0x1f1bfd(%rip)        # 0x7ffff7e1a098 <*ABS*@got.plt>
endbr64 
mov    %edi,%eax
mov    %rdi,%rdx
vpxor  %xmm0,%xmm0,%xmm0
and    $0xfff,%eax
cmp    $0xfe0,%eax
ja     0x7ffff7d9d930 <__strlen_avx2+336>
vpcmpeqb (%rdi),%ymm0,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d860 <__strlen_avx2+128>
tzcnt  %eax,%eax
vzeroupper 
ret    
mov    %rax,%r14
jmp    0x7ffff7c758d9 <__vfprintf_internal+2217>
mov    0x10(%rsp),%r13d
sub    %eax,%r13d
js     0x7ffff7c76fe0 <__vfprintf_internal+8112>
mov    0xd8(%rbp),%r13
lea    0x19fa12(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %r13,%rax
sub    %rdx,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c77459 <__vfprintf_internal+9257>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%r13)
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
xor    %r12d,%r12d
push   %rbp
push   %rbx
sub    $0x18,%rsp
test   %rdx,%rdx
je     0x7ffff7c8b66e <_IO_new_file_xsputn+110>
mov    %rdi,%rbp
mov    %rsi,%r13
mov    0x28(%rdi),%rdi
mov    %rdx,%rbx
mov    0x0(%rbp),%eax
and    $0xa00,%eax
cmp    $0xa00,%eax
je     0x7ffff7c8b680 <_IO_new_file_xsputn+128>
mov    0x30(%rbp),%r12
cmp    %rdi,%r12
jbe    0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
sub    %rdi,%r12
xor    %r14d,%r14d
test   %r12,%r12
je     0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
cmp    %rbx,%r12
mov    %r13,%rsi
mov    %rbx,%r15
cmova  %rbx,%r12
mov    %r12,%rdx
add    %r12,%r13
sub    %r12,%r15
call   0x7ffff7c283e0 <*ABS*+0xa97d0@plt>
endbr64 
bnd jmp *0x1f1c55(%rip)        # 0x7ffff7e1a040 <*ABS*@got.plt>
endbr64 
mov    %rdi,%rax
add    %rdx,%rax
jmp    0x7ffff7da07c7 <__memmove_avx_unaligned_erms+7>
cmp    $0x20,%rdx
jb     0x7ffff7da07f0 <__memmove_avx_unaligned_erms+48>
cmp    $0x10,%edx
jae    0x7ffff7da0822 <__memmove_avx_unaligned_erms+98>
vmovdqu (%rsi),%xmm0
vmovdqu -0x10(%rsi,%rdx,1),%xmm1
vmovdqu %xmm0,(%rdi)
vmovdqu %xmm1,-0x10(%rdi,%rdx,1)
ret    
mov    %rax,0x28(%rbp)
add    %r15,%r14
jne    0x7ffff7c8b6a3 <_IO_new_file_xsputn+163>
add    $0x18,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77028 <__vfprintf_internal+8184>
cmp    %r14,%rax
jae    0x7ffff7c75cc9 <__vfprintf_internal+3225>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
jns    0x7ffff7c75f80 <__vfprintf_internal+3920>
lea    0x1(%rbx),%r15
mov    $0x25,%esi
addl   $0x1,0x78(%rsp)
mov    %r15,%rdi
call   0x7ffff7c284d0 <*ABS*+0xab010@plt>
endbr64 
bnd jmp *0x1f1bdd(%rip)        # 0x7ffff7e1a0b8 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d5d0 <__strchrnul_avx2+464>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d4a0 <__strchrnul_avx2+160>
tzcnt  %eax,%eax
add    %rdi,%rax
vzeroupper 
ret    
mov    0xd8(%rbp),%rbx
lea    0x1a0a5c(%rip),%rdi        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %rax,%r14
mov    %rax,%r13
mov    %rbx,%rax
sub    %r15,%r14
sub    %rdi,%rax
cmp    %rax,0x30(%rsp)
jbe    0x7ffff7c76770 <__vfprintf_internal+5952>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %rbp,%rdi
call   *0x38(%rbx)
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
xor    %r12d,%r12d
push   %rbp
push   %rbx
sub    $0x18,%rsp
test   %rdx,%rdx
je     0x7ffff7c8b66e <_IO_new_file_xsputn+110>
mov    %rdi,%rbp
mov    %rsi,%r13
mov    0x28(%rdi),%rdi
mov    %rdx,%rbx
mov    0x0(%rbp),%eax
and    $0xa00,%eax
cmp    $0xa00,%eax
je     0x7ffff7c8b680 <_IO_new_file_xsputn+128>
mov    0x30(%rbp),%r12
cmp    %rdi,%r12
jbe    0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
sub    %rdi,%r12
xor    %r14d,%r14d
test   %r12,%r12
je     0x7ffff7c8b6a0 <_IO_new_file_xsputn+160>
cmp    %rbx,%r12
mov    %r13,%rsi
mov    %rbx,%r15
cmova  %rbx,%r12
mov    %r12,%rdx
add    %r12,%r13
sub    %r12,%r15
call   0x7ffff7c283e0 <*ABS*+0xa97d0@plt>
endbr64 
bnd jmp *0x1f1c55(%rip)        # 0x7ffff7e1a040 <*ABS*@got.plt>
endbr64 
mov    %rdi,%rax
add    %rdx,%rax
jmp    0x7ffff7da07c7 <__memmove_avx_unaligned_erms+7>
cmp    $0x20,%rdx
jb     0x7ffff7da07f0 <__memmove_avx_unaligned_erms+48>
cmp    $0x10,%edx
jae    0x7ffff7da0822 <__memmove_avx_unaligned_erms+98>
cmp    $0x8,%edx
jae    0x7ffff7da0840 <__memmove_avx_unaligned_erms+128>
mov    -0x8(%rsi,%rdx,1),%rcx
mov    (%rsi),%rsi
mov    %rsi,(%rdi)
mov    %rcx,-0x8(%rdi,%rdx,1)
ret    
mov    %rax,0x28(%rbp)
add    %r15,%r14
jne    0x7ffff7c8b6a3 <_IO_new_file_xsputn+163>
add    $0x18,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    %r14,%rax
jne    0x7ffff7c76728 <__vfprintf_internal+5880>
movslq %r12d,%rax
xor    %edx,%edx
add    %r14,%rax
js     0x7ffff7c77500 <__vfprintf_internal+9424>
cmp    %r14,%rax
jb     0x7ffff7c77500 <__vfprintf_internal+9424>
movslq %eax,%rcx
mov    %eax,%r12d
cmp    %rcx,%rax
mov    $0x1,%ecx
cmovne %ecx,%edx
test   %edx,%edx
jne    0x7ffff7c75860 <__vfprintf_internal+2096>
test   %eax,%eax
js     0x7ffff7c7533d <__vfprintf_internal+781>
cmpb   $0x0,0x0(%r13)
jne    0x7ffff7c75210 <__vfprintf_internal+480>
jmp    0x7ffff7c7533d <__vfprintf_internal+781>
testl  $0x8000,0x0(%rbp)
je     0x7ffff7c75380 <__vfprintf_internal+848>
mov    0x88(%rbp),%rdi
mov    0x4(%rdi),%eax
sub    $0x1,%eax
mov    %eax,0x4(%rdi)
jne    0x7ffff7c75346 <__vfprintf_internal+790>
movq   $0x0,0x8(%rdi)
xchg   %eax,(%rdi)
cmp    $0x1,%eax
jle    0x7ffff7c75346 <__vfprintf_internal+790>
cmpb   $0x0,0xa6(%rsp)
jne    0x7ffff7c75588 <__vfprintf_internal+1368>
lea    0xf0(%rsp),%rdi
call   0x7ffff7c91200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7c91228 <__GI___libc_cleanup_pop_restore+40>
ret    
jmp    0x7ffff7c75354 <__vfprintf_internal+804>
mov    0x528(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c7750a <__vfprintf_internal+9434>
add    $0x538,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    0x18(%rsp),%rdx
sub    %fs:0x28,%rdx
jne    0x7ffff7c607b7 <__printf+199>
add    $0xd8,%rsp
ret    
mov    -0xa8(%rbp),%rax
mov    0x8(%rax),%rax
mov    %rax,-0xa0(%rbp)
lea    -0x90(%rbp),%rax
lea    0x140b(%rip),%rdx        # 0x5555555570e7
mov    %rdx,%rsi
mov    %rax,%rdi
call   0x555555555190 <fopen@plt>
endbr64 
bnd jmp *0x3e25(%rip)        # 0x555555558fc0 <fopen@got.plt>
endbr64 
push   %r13
mov    %rsi,%r13
push   %r12
push   %rbp
mov    %rdi,%rbp
mov    $0x1d8,%edi
push   %rbx
sub    $0x8,%rsp
call   0x7ffff7c28380 <malloc@plt>
endbr64 
bnd jmp *0x1f1c65(%rip)        # 0x7ffff7e19ff0
endbr64 
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x10,%rsp
cmpb   $0x0,0x17c432(%rip)        # 0x7ffff7e214e8 <__malloc_initialized>
je     0x7ffff7ca52d0 <__GI___libc_malloc+560>
test   %rbp,%rbp
js     0x7ffff7ca52de <__GI___libc_malloc+574>
lea    0x17(%rbp),%rax
xor    %r12d,%r12d
cmp    $0x1f,%rax
ja     0x7ffff7ca51b0 <__GI___libc_malloc+272>
and    $0xfffffffffffffff0,%rax
lea    -0x11(%rax),%r12
shr    $0x4,%r12
jmp    0x7ffff7ca50d6 <__GI___libc_malloc+54>
mov    0x174ccb(%rip),%rbx        # 0x7ffff7e19da8
mov    %fs:(%rbx),%rdx
test   %rdx,%rdx
je     0x7ffff7ca51c8 <__GI___libc_malloc+296>
cmp    %r12,0x1752d7(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
ja     0x7ffff7ca5200 <__GI___libc_malloc+352>
movzwl (%rdx,%r12,2),%ecx
test   %cx,%cx
je     0x7ffff7ca50f7 <__GI___libc_malloc+87>
mov    %fs:0x18,%eax
test   %eax,%eax
je     0x7ffff7ca5250 <__GI___libc_malloc+432>
lea    0x175a29(%rip),%rbx        # 0x7ffff7e1ac80 <main_arena>
mov    %rbp,%rsi
mov    %rbx,%rdi
call   0x7ffff7ca39b0 <_int_malloc>
test   %rsi,%rsi
js     0x7ffff7ca4090 <_int_malloc+1760>
push   %r15
lea    0x17(%rsi),%rax
push   %r14
push   %r13
push   %r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x98,%rsp
cmp    $0x1f,%rax
ja     0x7ffff7ca3af8 <_int_malloc+328>
and    $0xfffffffffffffff0,%rax
mov    %rax,%r13
test   %rdi,%rdi
je     0x7ffff7ca4056 <_int_malloc+1702>
mov    %eax,%r14d
shr    $0x4,%r14d
cmp    0x17d9ea(%rip),%rax        # 0x7ffff7e21500 <global_max_fast>
jbe    0x7ffff7ca3d60 <_int_malloc+944>
cmp    $0x3ff,%rax
jbe    0x7ffff7ca4558 <_int_malloc+2984>
lea    -0x2(%r14,%r14,1),%eax
lea    0x70(,%rax,8),%rdx
jmp    0x7ffff7ca3a06 <_int_malloc+86>
add    %rbx,%rdx
mov    0x8(%rdx),%rax
lea    -0x10(%rdx),%rsi
cmp    %rax,%rsi
je     0x7ffff7ca3de8 <_int_malloc+1080>
mov    %r13,%rax
mov    %r13,%rdi
mov    %r14d,0x24(%rsp)
shr    $0x6,%rax
shr    $0x9,%rdi
movl   $0x6e,0x80(%rsp)
mov    %rax,0x50(%rsp)
add    $0x30,%eax
mov    %rdi,0x60(%rsp)
add    $0x5b,%edi
mov    %edi,0x84(%rsp)
mov    %eax,0x5c(%rsp)
movl   $0x77,0x7c(%rsp)
movl   $0x7c,0x78(%rsp)
movq   $0x0,0x70(%rsp)
movq   $0x0,0x68(%rsp)
lea    -0x11(%r13),%rax
mov    0x175f5a(%rip),%r12        # 0x7ffff7e19da8
shr    $0x4,%rax
mov    %rax,%r15
xor    %eax,%eax
mov    %rax,0x8(%rsp)
cmpq   $0x0,%fs:(%r12)
je     0x7ffff7ca3e74 <_int_malloc+1220>
cmp    %r15,0x17655d(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
cmova  %r13,%rax
mov    %rax,0x8(%rsp)
lea    0x60(%rbx),%r11
movq   $0x0,(%rsp)
mov    %r14d,0x58(%rsp)
movq   %r11,%xmm1
mov    %rbp,0x28(%rsp)
punpcklqdq %xmm1,%xmm1
mov    0x78(%rbx),%rdx
cmp    %r11,%rdx
je     0x7ffff7ca4228 <_int_malloc+2168>
cmp    $0x3ff,%r13
jbe    0x7ffff7ca4253 <_int_malloc+2211>
mov    0x24(%rsp),%eax
lea    0x1(%rax),%ecx
lea    0xe(%rax,%rax,1),%eax
mov    %ecx,%edi
lea    -0x10(%rbx,%rax,8),%rdx
shr    $0x5,%edi
mov    %edi,%eax
mov    0x860(%rbx,%rax,4),%esi
mov    $0x1,%eax
shl    %cl,%eax
nopl   0x0(%rax,%rax,1)
cmp    %esi,%eax
ja     0x7ffff7ca4450 <_int_malloc+2720>
lea    0x1(%rdi),%eax
cmp    $0x3,%edi
je     0x7ffff7ca4495 <_int_malloc+2789>
mov    %eax,%edx
mov    0x860(%rbx,%rdx,4),%esi
test   %esi,%esi
jne    0x7ffff7ca46cd <_int_malloc+3357>
lea    0x2(%rdi),%eax
cmp    $0x2,%edi
je     0x7ffff7ca4495 <_int_malloc+2789>
mov    %eax,%edx
mov    0x860(%rbx,%rdx,4),%esi
test   %esi,%esi
jne    0x7ffff7ca46cd <_int_malloc+3357>
cmp    $0x1,%edi
je     0x7ffff7ca4495 <_int_malloc+2789>
mov    0x86c(%rbx),%esi
test   %esi,%esi
jne    0x7ffff7ca46fe <_int_malloc+3406>
mov    0x60(%rbx),%rax
mov    0x8(%rax),%rdx
and    $0xfffffffffffffff8,%rdx
cmp    %rdx,0x888(%rbx)
jb     0x7ffff7ca46e6 <_int_malloc+3382>
lea    0x20(%r13),%rcx
cmp    %rdx,%rcx
jbe    0x7ffff7ca4873 <_int_malloc+3779>
lea    0x176406(%rip),%rcx        # 0x7ffff7e1ac80 <main_arena>
lea    (%rax,%r13,1),%rsi
mov    0x28(%rsp),%rbp
cmp    %rcx,%rbx
mov    %rsi,0x60(%rbx)
lea    0x10(%rax),%r9
setne  %cl
sub    %r13,%rdx
movzbl %cl,%ecx
or     $0x1,%rdx
shl    $0x2,%rcx
or     %r13,%rcx
or     $0x1,%rcx
mov    %rcx,0x8(%rax)
mov    0x17cc4c(%rip),%eax        # 0x7ffff7e214fc <perturb_byte>
mov    %rdx,0x8(%rsi)
test   %eax,%eax
je     0x7ffff7ca4076 <_int_malloc+1734>
add    $0x98,%rsp
mov    %r9,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
test   %rax,%rax
je     0x7ffff7ca5300 <__GI___libc_malloc+608>
mov    -0x8(%rax),%rdx
test   $0x2,%dl
jne    0x7ffff7ca51a2 <__GI___libc_malloc+258>
and    $0x4,%edx
je     0x7ffff7ca51a2 <__GI___libc_malloc+258>
add    $0x10,%rsp
pop    %rbx
pop    %rbp
pop    %r12
ret    
test   %rax,%rax
je     0x7ffff7c7f721 <_IO_new_fopen+241>
mov    %rax,%rbx
lea    0xe0(%rax),%rax
xor    %edx,%edx
xor    %esi,%esi
mov    %rax,0x88(%rbx)
lea    0xf0(%rbx),%rcx
mov    %rbx,%rdi
mov    %rbx,%r12
lea    0x197a40(%rip),%r8        # 0x7ffff7e170c0 <_IO_wfile_jumps>
call   0x7ffff7c8e650 <_IO_no_init>
endbr64 
push   %r13
mov    %r8,%r13
push   %r12
mov    %edx,%r12d
push   %rbp
mov    %rdi,%rbp
push   %rbx
mov    %rcx,%rbx
sub    $0x8,%rsp
call   0x7ffff7c8e5e0 <_IO_old_init>
endbr64 
mov    0x18e452(%rip),%edx        # 0x7ffff7e1ca3c <stdio_needs_locking>
or     $0xfbad0000,%esi
xor    %eax,%eax
pxor   %xmm0,%xmm0
mov    %esi,(%rdi)
test   %edx,%edx
movq   $0x0,0x68(%rdi)
setne  %al
xor    %ecx,%ecx
movups %xmm0,0x8(%rdi)
shl    $0x7,%eax
mov    %cx,0x80(%rdi)
mov    %eax,0x74(%rdi)
mov    0x88(%rdi),%rax
movups %xmm0,0x18(%rdi)
movups %xmm0,0x28(%rdi)
movups %xmm0,0x38(%rdi)
movups %xmm0,0x48(%rdi)
movups %xmm0,0x58(%rdi)
test   %rax,%rax
je     0x7ffff7c8e647 <_IO_old_init+103>
movq   $0x0,(%rax)
movq   $0x0,0x8(%rax)
ret    
mov    %r12d,0xc0(%rbp)
test   %r12d,%r12d
js     0x7ffff7c8e6c0 <_IO_no_init+112>
mov    %rbx,0xa0(%rbp)
pxor   %xmm0,%xmm0
movq   $0x0,0x50(%rbx)
mov    %r13,0xe0(%rbx)
movups %xmm0,(%rbx)
movups %xmm0,0x10(%rbx)
movups %xmm0,0x20(%rbx)
movups %xmm0,0x30(%rbx)
movups %xmm0,0x40(%rbx)
movq   $0x0,0xa8(%rbp)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
lea    0x197f74(%rip),%rax        # 0x7ffff7e17600 <_IO_file_jumps>
mov    %rbx,%rdi
mov    %rax,0xd8(%rbx)
call   0x7ffff7c8be10 <_IO_new_file_init_internal>
endbr64 
orl    $0x240c,(%rdi)
push   %rbx
mov    %rdi,%rbx
movq   $0xffffffffffffffff,0x90(%rdi)
call   0x7ffff7c8d2d0 <__GI__IO_link_in>
endbr64 
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x30,%rsp
mov    (%rdi),%edx
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
mov    %edx,%ebp
and    $0x80,%ebp
je     0x7ffff7c8d320 <__GI__IO_link_in+80>
or     $0x80,%dl
mov    %rsp,%r12
lea    -0x34d(%rip),%rax        # 0x7ffff7c8cfe0 <flush_cleanup>
mov    %rdi,%rbx
mov    %edx,(%rdi)
mov    %r12,%rdi
lea    0x18f714(%rip),%r13        # 0x7ffff7e1ca50 <list_all_lock>
movq   $0x0,0x8(%rsp)
mov    %rax,(%rsp)
call   0x7ffff7c911c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%r14
cmp    %r14,0x18f6fa(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
je     0x7ffff7c8d37c <__GI__IO_link_in+172>
mov    $0x1,%edx
mov    %ebp,%eax
lock cmpxchg %edx,0x18f6e1(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
jne    0x7ffff7c8d498 <__GI__IO_link_in+456>
mov    %r14,0x18f6dc(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
mov    0x18f6d2(%rip),%edx        # 0x7ffff7e1ca54 <list_all_lock+4>
mov    (%rbx),%eax
mov    %rbx,0x18f6b5(%rip)        # 0x7ffff7e1ca40 <run_fp>
add    $0x1,%edx
mov    %edx,0x18f6c0(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
and    $0x8000,%eax
jne    0x7ffff7c8d428 <__GI__IO_link_in+344>
mov    %fs:0x10,%rbp
mov    0x88(%rbx),%rdi
cmp    %rbp,0x8(%rdi)
je     0x7ffff7c8d478 <__GI__IO_link_in+424>
mov    $0x1,%edx
lock cmpxchg %edx,(%rdi)
jne    0x7ffff7c8d4b2 <__GI__IO_link_in+482>
mov    0x88(%rbx),%rdi
mov    (%rbx),%eax
mov    0x18e2a8(%rip),%rdx        # 0x7ffff7e1b680 <_IO_list_all>
addl   $0x1,0x4(%rdi)
mov    %rbp,0x8(%rdi)
mov    %rbx,0x18e299(%rip)        # 0x7ffff7e1b680 <_IO_list_all>
mov    %rdx,0x68(%rbx)
test   $0x80,%ah
jne    0x7ffff7c8d41b <__GI__IO_link_in+331>
mov    0x4(%rdi),%eax
sub    $0x1,%eax
mov    %eax,0x4(%rdi)
mov    0x18f655(%rip),%edx        # 0x7ffff7e1ca54 <list_all_lock+4>
jne    0x7ffff7c8d43a <__GI__IO_link_in+362>
movq   $0x0,0x8(%rdi)
xchg   %eax,(%rdi)
mov    0x18f643(%rip),%edx        # 0x7ffff7e1ca54 <list_all_lock+4>
cmp    $0x1,%eax
jle    0x7ffff7c8d43a <__GI__IO_link_in+362>
movq   $0x0,0x18f5fb(%rip)        # 0x7ffff7e1ca40 <run_fp>
sub    $0x1,%edx
mov    %edx,0x18f606(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
jne    0x7ffff7c8d466 <__GI__IO_link_in+406>
movq   $0x0,0x18f5fd(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
xchg   %edx,0x18f5ef(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
cmp    $0x1,%edx
jg     0x7ffff7c8d4a8 <__GI__IO_link_in+472>
mov    %r12,%rdi
call   0x7ffff7c91200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7c91228 <__GI___libc_cleanup_pop_restore+40>
ret    
jmp    0x7ffff7c8d2fc <__GI__IO_link_in+44>
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8d4bc <__GI__IO_link_in+492>
add    $0x30,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
ret    
movl   $0xffffffff,0x70(%rbx)
pop    %rbx
ret    
mov    $0x1,%ecx
mov    %r13,%rdx
mov    %rbp,%rsi
mov    %rbx,%rdi
call   0x7ffff7c8c180 <_IO_new_file_fopen>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x38,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
cmpl   $0xffffffff,0x70(%rdi)
jne    0x7ffff7c8c560 <_IO_new_file_fopen+992>
movzbl (%rdx),%eax
mov    %rdi,%rbp
mov    %rdx,%rbx
mov    %ecx,%r9d
cmp    $0x72,%al
je     0x7ffff7c8c750 <_IO_new_file_fopen+1488>
mov    $0x8,%r8d
xor    %edi,%edi
xor    %edx,%edx
jmp    0x7ffff7c8c220 <_IO_new_file_fopen+160>
movzbl 0x1(%rbx),%eax
lea    0x1(%rbx),%rcx
cmp    $0x78,%al
jg     0x7ffff7c8c268 <_IO_new_file_fopen+232>
cmp    $0x61,%al
jle    0x7ffff7c8c518 <_IO_new_file_fopen+920>
test   %al,%al
je     0x7ffff7c8c403 <_IO_new_file_fopen+643>
or     %edi,%edx
mov    $0x1b6,%ecx
mov    %rbp,%rdi
call   0x7ffff7c8c090 <__GI__IO_file_open>
endbr64 
push   %r12
xor    %eax,%eax
push   %rbp
mov    %r8d,%ebp
push   %rbx
mov    %rdi,%rbx
mov    %rsi,%rdi
mov    %edx,%esi
mov    %ecx,%edx
testb  $0x2,0x74(%rbx)
jne    0x7ffff7c8c160 <__GI__IO_file_open+208>
call   0x7ffff7d144e0 <__libc_open64>
endbr64 
push   %r12
mov    %esi,%r10d
mov    %esi,%r12d
push   %rbp
mov    %rdi,%rbp
sub    $0x68,%rsp
mov    %rdx,0x40(%rsp)
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
and    $0x40,%r10d
jne    0x7ffff7d14568 <__libc_open64+136>
mov    %esi,%eax
and    $0x410000,%eax
cmp    $0x410000,%eax
je     0x7ffff7d14568 <__libc_open64+136>
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7d14590 <__libc_open64+176>
mov    %r12d,%edx
mov    %rbp,%rsi
mov    $0xffffff9c,%edi
mov    $0x101,%eax
syscall 
cmp    $0xfffffffffffff000,%rax
ja     0x7ffff7d145d8 <__libc_open64+248>
mov    0x28(%rsp),%rdx
sub    %fs:0x28,%rdx
jne    0x7ffff7d14603 <__libc_open64+291>
add    $0x68,%rsp
pop    %rbp
pop    %r12
ret    
mov    %eax,%r12d
test   %r12d,%r12d
js     0x7ffff7c8c150 <__GI__IO_file_open+192>
mov    (%rbx),%eax
mov    %ebp,%edx
and    $0x1004,%ebp
mov    %r12d,0x70(%rbx)
and    $0x100c,%edx
and    $0xffffeff3,%eax
or     %edx,%eax
mov    %eax,(%rbx)
cmp    $0x1004,%ebp
jne    0x7ffff7c8c120 <__GI__IO_file_open+144>
mov    %rbx,%rdi
call   0x7ffff7c8d2d0 <__GI__IO_link_in>
endbr64 
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x30,%rsp
mov    (%rdi),%edx
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
mov    %edx,%ebp
and    $0x80,%ebp
je     0x7ffff7c8d320 <__GI__IO_link_in+80>
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8d4bc <__GI__IO_link_in+492>
add    $0x30,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
ret    
mov    %rbx,%rax
pop    %rbx
pop    %rbp
pop    %r12
ret    
mov    %rax,%r12
test   %rax,%rax
je     0x7ffff7c8c560 <_IO_new_file_fopen+992>
lea    0x1(%rbx),%rdi
lea    0x14d001(%rip),%rsi        # 0x7ffff7dd942a
call   0x7ffff7ca8fc0 <__strstr_sse2>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x128,%rsp
movzbl (%rsi),%ebx
mov    %fs:0x28,%rax
mov    %rax,0x118(%rsp)
xor    %eax,%eax
test   %bl,%bl
je     0x7ffff7ca9230 <__strstr_sse2+624>
movzbl %bl,%ebp
mov    %rsi,%r13
mov    %ebp,%esi
call   0x7ffff7c28600 <*ABS*+0xa8260@plt>
endbr64 
bnd jmp *0x1f1b45(%rip)        # 0x7ffff7e1a150 <*ABS*@got.plt>
endbr64 
vmovd  %esi,%xmm0
mov    %edi,%eax
and    $0xfff,%eax
vpbroadcastb %xmm0,%ymm0
vpxor  %xmm9,%xmm9,%xmm9
cmp    $0xfe0,%eax
ja     0x7ffff7d9d3b0 <__strchr_avx2+560>
vmovdqu (%rdi),%ymm8
vpcmpeqb %ymm8,%ymm0,%ymm1
vpcmpeqb %ymm8,%ymm9,%ymm2
vpor   %ymm1,%ymm2,%ymm1
vpmovmskb %ymm1,%eax
test   %eax,%eax
je     0x7ffff7d9d260 <__strchr_avx2+224>
tzcnt  %eax,%eax
cmp    (%rdi,%rax,1),%sil
jne    0x7ffff7d9d1f5 <__strchr_avx2+117>
xor    %eax,%eax
vzeroupper 
ret    
mov    %rax,%r12
test   %rax,%rax
je     0x7ffff7ca9201 <__strstr_sse2+577>
xor    %r12d,%r12d
mov    0x118(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7ca9308 <__strstr_sse2+840>
add    $0x128,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    %rax,%rbx
test   %rax,%rax
je     0x7ffff7c8c1e0 <_IO_new_file_fopen+96>
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8c818 <_IO_new_file_fopen+1688>
add    $0x38,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
test   %rax,%rax
je     0x7ffff7c7f700 <_IO_new_fopen+208>
testb  $0x1,0x74(%rbx)
je     0x7ffff7c7f6ed <_IO_new_fopen+189>
add    $0x8,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    %rax,-0x98(%rbp)
mov    -0x98(%rbp),%rdx
mov    -0xa0(%rbp),%rax
mov    %rdx,%rcx
mov    $0xc29160,%edx
mov    $0x1,%esi
mov    %rax,%rdi
call   0x555555555120 <fread@plt>
endbr64 
bnd jmp *0x3e5d(%rip)        # 0x555555558f88 <fread@got.plt>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
mov    %rsi,%r12
push   %rbp
imul   %rdx,%r12
push   %rbx
sub    $0x18,%rsp
test   %r12,%r12
je     0x7ffff7c7fbe1 <__GI__IO_fread+177>
mov    (%rcx),%eax
mov    %rdi,%r14
mov    %rsi,%rbp
mov    %rdx,%r13
mov    %rcx,%rbx
and    $0x8000,%eax
jne    0x7ffff7c7fb9b <__GI__IO_fread+107>
mov    %fs:0x10,%r15
mov    0x88(%rcx),%rdi
cmp    %r15,0x8(%rdi)
je     0x7ffff7c7fb97 <__GI__IO_fread+103>
mov    $0x1,%edx
lock cmpxchg %edx,(%rdi)
jne    0x7ffff7c7fc18 <__GI__IO_fread+232>
mov    0x88(%rbx),%rdi
mov    %r15,0x8(%rdi)
addl   $0x1,0x4(%rdi)
mov    %r12,%rdx
mov    %r14,%rsi
mov    %rbx,%rdi
call   0x7ffff7c8dfd0 <__GI__IO_sgetn>
endbr64 
push   %rbx
lea    0x188a24(%rip),%rcx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x189785(%rip),%rax        # 0x7ffff7e17768
sub    %rcx,%rax
sub    $0x20,%rsp
mov    0xd8(%rdi),%rbx
mov    %rbx,%r8
sub    %rcx,%r8
cmp    %r8,%rax
jbe    0x7ffff7c8e010 <__GI__IO_sgetn+64>
mov    0x40(%rbx),%rax
add    $0x20,%rsp
pop    %rbx
jmp    *%rax
endbr64 
push   %r15
push   %r14
push   %r13
mov    %rsi,%r13
push   %r12
push   %rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x18,%rsp
cmpq   $0x0,0x38(%rdi)
mov    %rdx,(%rsp)
je     0x7ffff7c8b4a8 <__GI__IO_file_xsgetn+504>
mov    0x48(%rdi),%rdi
test   %rdi,%rdi
je     0x7ffff7c8b4bc <__GI__IO_file_xsgetn+524>
mov    %rbx,%rdi
call   0x7ffff7c8dc90 <__GI__IO_doallocbuf>
endbr64 
cmpq   $0x0,0x38(%rdi)
je     0x7ffff7c8dca0 <__GI__IO_doallocbuf+16>
push   %r12
push   %rbp
push   %rbx
mov    (%rdi),%eax
mov    %rdi,%rbx
test   $0x2,%al
je     0x7ffff7c8dcb7 <__GI__IO_doallocbuf+39>
mov    0xd8(%rbx),%rbp
lea    0x188d3b(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x189a9c(%rip),%rax        # 0x7ffff7e17768
sub    %rdx,%rax
mov    %rbp,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c8dd40 <__GI__IO_doallocbuf+176>
mov    %rbx,%rdi
call   *0x68(%rbp)
endbr64 
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0xa0,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x98(%rsp)
xor    %eax,%eax
mov    0x70(%rdi),%eax
test   %eax,%eax
js     0x7ffff7c7ebe8 <__GI__IO_file_doallocate+216>
mov    0xd8(%rdi),%rbx
lea    0x197eb2(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x198c13(%rip),%rax        # 0x7ffff7e17768
sub    %rdx,%rax
mov    %rbx,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c7ec60 <__GI__IO_file_doallocate+336>
mov    %rsp,%rsi
mov    %rbp,%rdi
call   *0x90(%rbx)
endbr64 
mov    0x70(%rdi),%edi
jmp    0x7ffff7d13cd0 <__GI___fstat64>
endbr64 
mov    %rsi,%rdx
test   %edi,%edi
js     0x7ffff7d13cf0 <__GI___fstat64+32>
mov    $0x1000,%ecx
lea    0xc4768(%rip),%rsi        # 0x7ffff7dd844f
jmp    0x7ffff7d13d30 <__GI___fstatat64>
endbr64 
mov    %ecx,%r10d
mov    $0x106,%eax
syscall 
cmp    $0xfffff000,%eax
ja     0x7ffff7d13d50 <__GI___fstatat64+32>
xor    %eax,%eax
ret    
test   %eax,%eax
js     0x7ffff7c7ebe8 <__GI__IO_file_doallocate+216>
mov    0x18(%rsp),%eax
and    $0xf000,%eax
cmp    $0x2000,%eax
je     0x7ffff7c7ec08 <__GI__IO_file_doallocate+248>
mov    0x38(%rsp),%rbx
lea    -0x1(%rbx),%rax
cmp    $0x1ffe,%rax
ja     0x7ffff7c7ebe8 <__GI__IO_file_doallocate+216>
mov    %rbx,%rdi
call   0x7ffff7c28380 <malloc@plt>
endbr64 
bnd jmp *0x1f1c65(%rip)        # 0x7ffff7e19ff0
endbr64 
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x10,%rsp
cmpb   $0x0,0x17c432(%rip)        # 0x7ffff7e214e8 <__malloc_initialized>
je     0x7ffff7ca52d0 <__GI___libc_malloc+560>
test   %rbp,%rbp
js     0x7ffff7ca52de <__GI___libc_malloc+574>
lea    0x17(%rbp),%rax
xor    %r12d,%r12d
cmp    $0x1f,%rax
ja     0x7ffff7ca51b0 <__GI___libc_malloc+272>
and    $0xfffffffffffffff0,%rax
lea    -0x11(%rax),%r12
shr    $0x4,%r12
jmp    0x7ffff7ca50d6 <__GI___libc_malloc+54>
mov    0x174ccb(%rip),%rbx        # 0x7ffff7e19da8
mov    %fs:(%rbx),%rdx
test   %rdx,%rdx
je     0x7ffff7ca51c8 <__GI___libc_malloc+296>
cmp    %r12,0x1752d7(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
ja     0x7ffff7ca5200 <__GI___libc_malloc+352>
mov    %fs:0x18,%eax
test   %eax,%eax
je     0x7ffff7ca5250 <__GI___libc_malloc+432>
lea    0x175a29(%rip),%rbx        # 0x7ffff7e1ac80 <main_arena>
mov    %rbp,%rsi
mov    %rbx,%rdi
call   0x7ffff7ca39b0 <_int_malloc>
test   %rsi,%rsi
js     0x7ffff7ca4090 <_int_malloc+1760>
push   %r15
lea    0x17(%rsi),%rax
push   %r14
push   %r13
push   %r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x98,%rsp
cmp    $0x1f,%rax
ja     0x7ffff7ca3af8 <_int_malloc+328>
and    $0xfffffffffffffff0,%rax
mov    %rax,%r13
test   %rdi,%rdi
je     0x7ffff7ca4056 <_int_malloc+1702>
mov    %eax,%r14d
shr    $0x4,%r14d
cmp    0x17d9ea(%rip),%rax        # 0x7ffff7e21500 <global_max_fast>
jbe    0x7ffff7ca3d60 <_int_malloc+944>
cmp    $0x3ff,%rax
jbe    0x7ffff7ca4558 <_int_malloc+2984>
mov    $0x2,%edx
mov    %rax,%rcx
mov    %rax,%rdi
mov    %rax,%rsi
shr    $0xc,%rsi
mov    %rax,%r15
shr    $0x12,%rax
shr    $0xf,%r15
shr    $0x6,%rcx
lea    0x6e(%rsi),%r9d
mov    %rsi,0x68(%rsp)
shr    $0x9,%rdi
cmp    %rdx,%rax
lea    0x77(%r15),%r10d
mov    %r15,0x70(%rsp)
cmova  %rdx,%rax
mov    %r15,%rdx
lea    0x5b(%rdi),%r15d
mov    %rcx,0x50(%rsp)
mov    %rdi,0x60(%rsp)
lea    0x7c(%rax),%r11d
mov    %rsi,%rax
mov    %ecx,%esi
mov    %r10d,0x7c(%rsp)
add    $0x30,%esi
mov    %r11d,0x78(%rsp)
mov    %r9d,0x80(%rsp)
mov    %r15d,0x84(%rsp)
mov    %esi,0x5c(%rsp)
mov    %esi,0x24(%rsp)
cmp    $0x30,%rcx
jbe    0x7ffff7ca3bc8 <_int_malloc+536>
mov    %r15d,0x24(%rsp)
cmp    $0x14,%rdi
jbe    0x7ffff7ca3bc8 <_int_malloc+536>
mov    0x8(%rbx),%eax
test   %eax,%eax
je     0x7ffff7ca3e43 <_int_malloc+1171>
lea    -0x11(%r13),%rax
mov    0x175f5a(%rip),%r12        # 0x7ffff7e19da8
shr    $0x4,%rax
mov    %rax,%r15
xor    %eax,%eax
mov    %rax,0x8(%rsp)
cmpq   $0x0,%fs:(%r12)
je     0x7ffff7ca3e74 <_int_malloc+1220>
cmp    %r15,0x17655d(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
cmova  %r13,%rax
mov    %rax,0x8(%rsp)
lea    0x60(%rbx),%r11
movq   $0x0,(%rsp)
mov    %r14d,0x58(%rsp)
movq   %r11,%xmm1
mov    %rbp,0x28(%rsp)
punpcklqdq %xmm1,%xmm1
mov    0x78(%rbx),%rdx
cmp    %r11,%rdx
je     0x7ffff7ca4228 <_int_malloc+2168>
cmp    $0x3ff,%r13
jbe    0x7ffff7ca4253 <_int_malloc+2211>
mov    0x24(%rsp),%eax
lea    0xc(%rax,%rax,1),%eax
lea    (%rbx,%rax,8),%rdx
mov    (%rdx),%rax
lea    -0x10(%rdx),%rcx
cmp    %rcx,%rax
je     0x7ffff7ca4253 <_int_malloc+2211>
mov    0x24(%rsp),%eax
lea    0x1(%rax),%ecx
lea    0xe(%rax,%rax,1),%eax
mov    %ecx,%edi
lea    -0x10(%rbx,%rax,8),%rdx
shr    $0x5,%edi
mov    %edi,%eax
mov    0x860(%rbx,%rax,4),%esi
mov    $0x1,%eax
shl    %cl,%eax
nopl   0x0(%rax,%rax,1)
cmp    %esi,%eax
ja     0x7ffff7ca4450 <_int_malloc+2720>
lea    0x1(%rdi),%eax
cmp    $0x3,%edi
je     0x7ffff7ca4495 <_int_malloc+2789>
mov    0x60(%rbx),%rax
mov    0x8(%rax),%rdx
and    $0xfffffffffffffff8,%rdx
cmp    %rdx,0x888(%rbx)
jb     0x7ffff7ca46e6 <_int_malloc+3382>
lea    0x20(%r13),%rcx
cmp    %rdx,%rcx
jbe    0x7ffff7ca4873 <_int_malloc+3779>
lea    0x176406(%rip),%rcx        # 0x7ffff7e1ac80 <main_arena>
lea    (%rax,%r13,1),%rsi
mov    0x28(%rsp),%rbp
cmp    %rcx,%rbx
mov    %rsi,0x60(%rbx)
lea    0x10(%rax),%r9
setne  %cl
sub    %r13,%rdx
movzbl %cl,%ecx
or     $0x1,%rdx
shl    $0x2,%rcx
or     %r13,%rcx
or     $0x1,%rcx
mov    %rcx,0x8(%rax)
mov    0x17cc4c(%rip),%eax        # 0x7ffff7e214fc <perturb_byte>
mov    %rdx,0x8(%rsi)
test   %eax,%eax
je     0x7ffff7ca4076 <_int_malloc+1734>
add    $0x98,%rsp
mov    %r9,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
test   %rax,%rax
je     0x7ffff7ca5300 <__GI___libc_malloc+608>
mov    -0x8(%rax),%rdx
test   $0x2,%dl
jne    0x7ffff7ca51a2 <__GI___libc_malloc+258>
and    $0x4,%edx
je     0x7ffff7ca51a2 <__GI___libc_malloc+258>
add    $0x10,%rsp
pop    %rbx
pop    %rbp
pop    %r12
ret    
mov    %rax,%rsi
test   %rax,%rax
je     0x7ffff7c7ebfd <__GI__IO_file_doallocate+237>
lea    (%rax,%rbx,1),%rdx
mov    $0x1,%ecx
mov    %rbp,%rdi
call   0x7ffff7c8dc20 <__GI__IO_setb>
endbr64 
push   %rbp
movq   %rsi,%xmm0
movq   %rdx,%xmm1
mov    %ecx,%ebp
push   %rbx
mov    %rdi,%rbx
punpcklqdq %xmm1,%xmm0
sub    $0x18,%rsp
mov    0x38(%rdi),%rdi
mov    (%rbx),%eax
test   %rdi,%rdi
je     0x7ffff7c8dc4c <__GI__IO_setb+44>
mov    %eax,%edx
or     $0x1,%eax
movups %xmm0,0x38(%rbx)
and    $0xfffffffe,%edx
test   %ebp,%ebp
cmovne %edx,%eax
mov    %eax,(%rbx)
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
mov    $0x1,%eax
mov    0x98(%rsp),%rdx
sub    %fs:0x28,%rdx
jne    0x7ffff7c7ec6a <__GI__IO_file_doallocate+346>
add    $0xa0,%rsp
pop    %rbx
pop    %rbp
pop    %r12
ret    
cmp    $0xffffffff,%eax
jne    0x7ffff7c8dd19 <__GI__IO_doallocbuf+137>
pop    %rbx
pop    %rbp
pop    %r12
ret    
jmp    0x7ffff7c8b2d7 <__GI__IO_file_xsgetn+39>
mov    (%rsp),%rax
lea    0x18b71e(%rip),%r15        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x18c47f(%rip),%r14        # 0x7ffff7e17768
sub    %r15,%r14
mov    %rax,%r12
test   %rax,%rax
je     0x7ffff7c8b3c4 <__GI__IO_file_xsgetn+276>
nopl   0x0(%rax,%rax,1)
mov    0x8(%rbx),%rsi
mov    0x10(%rbx),%rbp
sub    %rsi,%rbp
cmp    %r12,%rbp
jae    0x7ffff7c8b418 <__GI__IO_file_xsgetn+360>
test   %rbp,%rbp
jne    0x7ffff7c8b3d8 <__GI__IO_file_xsgetn+296>
testl  $0x100,(%rbx)
jne    0x7ffff7c8b3f9 <__GI__IO_file_xsgetn+329>
mov    0x38(%rbx),%rcx
test   %rcx,%rcx
je     0x7ffff7c8b3d0 <__GI__IO_file_xsgetn+288>
mov    0x40(%rbx),%rsi
sub    %rcx,%rsi
cmp    %r12,%rsi
ja     0x7ffff7c8b430 <__GI__IO_file_xsgetn+384>
cmp    $0x7f,%rsi
jbe    0x7ffff7c8b3d0 <__GI__IO_file_xsgetn+288>
mov    %r12,%rax
xor    %edx,%edx
div    %rsi
mov    %rdx,%rdi
mov    %r12,%rdx
sub    %rdi,%rdx
mov    0xd8(%rbx),%rbp
movq   %rcx,%xmm0
punpcklqdq %xmm0,%xmm0
mov    %rbp,%rax
movups %xmm0,0x8(%rbx)
sub    %r15,%rax
movups %xmm0,0x18(%rbx)
movups %xmm0,0x28(%rbx)
cmp    %rax,%r14
jbe    0x7ffff7c8b460 <__GI__IO_file_xsgetn+432>
mov    %r13,%rsi
mov    %rbx,%rdi
call   *0x70(%rbp)
endbr64 
mov    0x70(%rdi),%r8d
testb  $0x2,0x74(%rdi)
mov    %r8d,%edi
jne    0x7ffff7c8b950 <__GI__IO_file_read+32>
jmp    0x7ffff7d147d0 <__GI___libc_read>
endbr64 
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7d147f0 <__GI___libc_read+32>
syscall 
cmp    $0xfffffffffffff000,%rax
ja     0x7ffff7d14840 <__GI___libc_read+112>
ret    
test   %rax,%rax
jle    0x7ffff7c8b488 <__GI__IO_file_xsgetn+472>
mov    0x90(%rbx),%rdx
add    %rax,%r13
sub    %rax,%r12
cmp    $0xffffffffffffffff,%rdx
je     0x7ffff7c8b3bb <__GI__IO_file_xsgetn+267>
test   %r12,%r12
jne    0x7ffff7c8b300 <__GI__IO_file_xsgetn+80>
mov    0x8(%rbx),%rsi
mov    0x10(%rbx),%rbp
sub    %rsi,%rbp
cmp    %r12,%rbp
jae    0x7ffff7c8b418 <__GI__IO_file_xsgetn+360>
test   %rbp,%rbp
jne    0x7ffff7c8b3d8 <__GI__IO_file_xsgetn+296>
testl  $0x100,(%rbx)
jne    0x7ffff7c8b3f9 <__GI__IO_file_xsgetn+329>
mov    0x38(%rbx),%rcx
test   %rcx,%rcx
je     0x7ffff7c8b3d0 <__GI__IO_file_xsgetn+288>
mov    0x40(%rbx),%rsi
sub    %rcx,%rsi
cmp    %r12,%rsi
ja     0x7ffff7c8b430 <__GI__IO_file_xsgetn+384>
mov    %rbx,%rdi
call   0x7ffff7c8d870 <__GI___underflow>
endbr64 
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0xc0(%rdi),%eax
test   %eax,%eax
jne    0x7ffff7c8d900 <__GI___underflow+144>
movl   $0xffffffff,0xc0(%rdi)
mov    0x0(%rbp),%edx
test   $0x8,%dh
jne    0x7ffff7c8d970 <__GI___underflow+256>
mov    0x8(%rbp),%rax
mov    0x10(%rbp),%rsi
cmp    %rax,%rsi
ja     0x7ffff7c8d960 <__GI___underflow+240>
and    $0x1,%dh
jne    0x7ffff7c8d940 <__GI___underflow+208>
cmpq   $0x0,0x60(%rbp)
je     0x7ffff7c8d910 <__GI___underflow+160>
mov    0x48(%rbp),%rdi
test   %rdi,%rdi
je     0x7ffff7c8d8ca <__GI___underflow+90>
mov    0xd8(%rbp),%rbx
lea    0x189128(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x189e89(%rip),%rax        # 0x7ffff7e17768
sub    %rdx,%rax
mov    %rbx,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c8da00 <__GI___underflow+400>
mov    0x20(%rbx),%rax
add    $0x8,%rsp
mov    %rbp,%rdi
pop    %rbx
pop    %rbp
jmp    *%rax
endbr64 
mov    (%rdi),%eax
test   $0x10,%al
jne    0x7ffff7c8cd88 <_IO_new_file_underflow+728>
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x18,%rsp
test   $0x4,%al
jne    0x7ffff7c8cd90 <_IO_new_file_underflow+736>
mov    0x8(%rdi),%rdx
cmp    0x10(%rdi),%rdx
jb     0x7ffff7c8cc70 <_IO_new_file_underflow+448>
cmpq   $0x0,0x38(%rdi)
je     0x7ffff7c8ccc0 <_IO_new_file_underflow+528>
test   $0x202,%eax
je     0x7ffff7c8cbd2 <_IO_new_file_underflow+290>
lea    0x18ab8f(%rip),%r15        # 0x7ffff7e17768
lea    0x189e20(%rip),%rbp        # 0x7ffff7e16a00 <_IO_helper_jumps>
sub    %rbp,%r15
lea    0x189e16(%rip),%r14        # 0x7ffff7e16a00 <_IO_helper_jumps>
mov    %r15,%r13
mov    %rbx,%rdi
call   0x7ffff7c8d720 <__GI__IO_switch_to_get_mode>
endbr64 
push   %rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x8,%rsp
mov    0x28(%rdi),%rax
cmp    0x20(%rdi),%rax
jbe    0x7ffff7c8d76e <__GI__IO_switch_to_get_mode+78>
mov    (%rbx),%edx
test   $0x1,%dh
jne    0x7ffff7c8d7a8 <__GI__IO_switch_to_get_mode+136>
mov    0x38(%rbx),%rcx
mov    %rcx,0x18(%rbx)
cmp    %rax,0x10(%rbx)
jae    0x7ffff7c8d787 <__GI__IO_switch_to_get_mode+103>
and    $0xf7,%dh
mov    %rax,0x8(%rbx)
mov    %edx,(%rbx)
mov    %rax,0x30(%rbx)
mov    %rax,0x20(%rbx)
xor    %eax,%eax
add    $0x8,%rsp
pop    %rbx
pop    %rbp
ret    
movdqu 0x38(%rbx),%xmm0
mov    0xd8(%rbx),%rbp
movdqa %xmm0,%xmm1
mov    %rbp,%rax
movq   %xmm0,%rsi
punpcklqdq %xmm0,%xmm1
sub    %r14,%rax
movups %xmm1,0x8(%rbx)
movups %xmm1,0x18(%rbx)
movups %xmm1,0x28(%rbx)
cmp    %r13,%rax
jae    0x7ffff7c8cd48 <_IO_new_file_underflow+664>
mov    0x40(%rbx),%rdx
mov    %rbx,%rdi
sub    %rsi,%rdx
call   *0x70(%rbp)
endbr64 
mov    0x70(%rdi),%r8d
testb  $0x2,0x74(%rdi)
mov    %r8d,%edi
jne    0x7ffff7c8b950 <__GI__IO_file_read+32>
jmp    0x7ffff7d147d0 <__GI___libc_read>
endbr64 
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7d147f0 <__GI___libc_read+32>
syscall 
cmp    $0xfffffffffffff000,%rax
ja     0x7ffff7d14840 <__GI___libc_read+112>
ret    
test   %rax,%rax
jle    0x7ffff7c8cc88 <_IO_new_file_underflow+472>
mov    0x90(%rbx),%rdx
add    %rax,0x10(%rbx)
cmp    $0xffffffffffffffff,%rdx
je     0x7ffff7c8cc56 <_IO_new_file_underflow+422>
mov    0x8(%rbx),%rax
movzbl (%rax),%eax
add    $0x18,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    $0xffffffff,%eax
jne    0x7ffff7c8b300 <__GI__IO_file_xsgetn+80>
mov    0x8(%rbx),%rsi
mov    0x10(%rbx),%rbp
sub    %rsi,%rbp
cmp    %r12,%rbp
jae    0x7ffff7c8b418 <__GI__IO_file_xsgetn+360>
mov    %r13,%rdi
mov    %r12,%rdx
call   0x7ffff7c28620 <*ABS*+0xa9c10@plt>
endbr64 
bnd jmp *0x1f1b35(%rip)        # 0x7ffff7e1a160 <*ABS*@got.plt>
endbr64 
mov    %rdi,%rax
cmp    $0x20,%rdx
jb     0x7ffff7da07f0 <__memmove_avx_unaligned_erms+48>
vmovdqu (%rsi),%ymm0
cmp    $0x40,%rdx
ja     0x7ffff7da0880 <__memmove_avx_unaligned_erms+192>
cmp    0x79b71(%rip),%rdx        # 0x7ffff7e1a3f8 <__x86_rep_movsb_threshold>
ja     0x7ffff7da0a80 <__memmove_avx_unaligned_erms+704>
cmp    $0x100,%rdx
ja     0x7ffff7da08f5 <__memmove_avx_unaligned_erms+309>
mov    %rdi,%rcx
sub    %rsi,%rcx
cmp    %rdx,%rcx
jb     0x7ffff7da09b0 <__memmove_avx_unaligned_erms+496>
cmp    0x80c9d(%rip),%rdx        # 0x7ffff7e215a8 <__x86_shared_non_temporal_threshold>
ja     0x7ffff7da0aed <__memmove_avx_unaligned_erms+813>
lea    (%rcx,%rdx,1),%r8
xor    %rcx,%r8
shr    $0x3f,%r8
and    $0xf00,%ecx
add    %r8d,%ecx
je     0x7ffff7da09b5 <__memmove_avx_unaligned_erms+501>
vmovdqu -0x20(%rsi,%rdx,1),%ymm5
vmovdqu -0x40(%rsi,%rdx,1),%ymm6
mov    %rdi,%rcx
or     $0x1f,%rdi
vmovdqu -0x60(%rsi,%rdx,1),%ymm7
vmovdqu -0x80(%rsi,%rdx,1),%ymm8
sub    %rcx,%rsi
inc    %rdi
add    %rdi,%rsi
lea    -0x80(%rcx,%rdx,1),%rdx
nopl   0x0(%rax,%rax,1)
vmovdqu (%rsi),%ymm1
vmovdqu 0x20(%rsi),%ymm2
vmovdqu 0x40(%rsi),%ymm3
vmovdqu 0x60(%rsi),%ymm4
sub    $0xffffffffffffff80,%rsi
vmovdqa %ymm1,(%rdi)
vmovdqa %ymm2,0x20(%rdi)
vmovdqa %ymm3,0x40(%rdi)
vmovdqa %ymm4,0x60(%rdi)
sub    $0xffffffffffffff80,%rdi
cmp    %rdi,%rdx
ja     0x7ffff7da0960 <__memmove_avx_unaligned_erms+416>
vmovdqu (%rsi),%ymm1
vmovdqu 0x20(%rsi),%ymm2
vmovdqu 0x40(%rsi),%ymm3
vmovdqu 0x60(%rsi),%ymm4
sub    $0xffffffffffffff80,%rsi
vmovdqa %ymm1,(%rdi)
vmovdqa %ymm2,0x20(%rdi)
vmovdqa %ymm3,0x40(%rdi)
vmovdqa %ymm4,0x60(%rdi)
sub    $0xffffffffffffff80,%rdi
cmp    %rdi,%rdx
ja     0x7ffff7da0960 <__memmove_avx_unaligned_erms+416>
vmovdqu %ymm5,0x60(%rdx)
vmovdqu %ymm6,0x40(%rdx)
vmovdqu %ymm7,0x20(%rdx)
vmovdqu %ymm8,(%rdx)
vmovdqu %ymm0,(%rcx)
vzeroupper 
ret    
add    %r12,0x8(%rbx)
mov    (%rsp),%r13
jmp    0x7ffff7c8b448 <__GI__IO_file_xsgetn+408>
add    $0x18,%rsp
mov    %r13,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
testl  $0x8000,(%rbx)
jne    0x7ffff7c7fbd4 <__GI__IO_fread+164>
mov    0x88(%rbx),%rdi
mov    0x4(%rdi),%ecx
lea    -0x1(%rcx),%edx
mov    %edx,0x4(%rdi)
test   %edx,%edx
jne    0x7ffff7c7fbd4 <__GI__IO_fread+164>
movq   $0x0,0x8(%rdi)
xchg   %edx,(%rdi)
cmp    $0x1,%edx
jg     0x7ffff7c7fc00 <__GI__IO_fread+208>
cmp    %rax,%r12
je     0x7ffff7c7fbf8 <__GI__IO_fread+200>
mov    %r13,%r12
jmp    0x7ffff7c7fbe1 <__GI__IO_fread+177>
add    $0x18,%rsp
mov    %r12,%rax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    -0x98(%rbp),%rax
mov    %rax,%rdi
call   0x555555555130 <fclose@plt>
endbr64 
bnd jmp *0x3e55(%rip)        # 0x555555558f90 <fclose@got.plt>
endbr64 
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
mov    (%rdi),%eax
test   $0x20,%ah
jne    0x7ffff7c7ed30 <_IO_new_fclose+192>
call   0x7ffff7c8d2b0 <__GI__IO_un_link>
endbr64 
testb  $0x80,(%rdi)
jne    0x7ffff7c8d2c0 <__GI__IO_un_link+16>
jmp    0x7ffff7c8d070 <__GI__IO_un_link>
push   %r13
push   %r12
lea    0x18f9d5(%rip),%r12        # 0x7ffff7e1ca50 <list_all_lock>
push   %rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x38,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
mov    %rsp,%rbp
lea    -0xbe(%rip),%rax        # 0x7ffff7c8cfe0 <flush_cleanup>
movq   $0x0,0x8(%rsp)
mov    %rbp,%rdi
mov    %rax,(%rsp)
call   0x7ffff7c911c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%r13
cmp    0x18f995(%rip),%r13        # 0x7ffff7e1ca58 <list_all_lock+8>
je     0x7ffff7c8d0e1 <__GI__IO_un_link+113>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,0x18f97c(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
jne    0x7ffff7c8d270 <__GI__IO_un_link+512>
mov    %r13,0x18f977(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
mov    0x18f96d(%rip),%edx        # 0x7ffff7e1ca54 <list_all_lock+4>
mov    (%rbx),%esi
mov    %rbx,0x18f950(%rip)        # 0x7ffff7e1ca40 <run_fp>
lea    0x1(%rdx),%eax
mov    %eax,0x18f95b(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
mov    %esi,%eax
and    $0x8000,%eax
jne    0x7ffff7c8d1f8 <__GI__IO_un_link+392>
mov    %fs:0x10,%r13
mov    0x88(%rbx),%rdi
cmp    0x8(%rdi),%r13
je     0x7ffff7c8d230 <__GI__IO_un_link+448>
mov    $0x1,%edx
lock cmpxchg %edx,(%rdi)
jne    0x7ffff7c8d297 <__GI__IO_un_link+551>
mov    (%rbx),%esi
mov    0x88(%rbx),%rdi
mov    0x18e541(%rip),%rcx        # 0x7ffff7e1b680 <_IO_list_all>
mov    %esi,%eax
addl   $0x1,0x4(%rdi)
mov    %r13,0x8(%rdi)
and    $0x8000,%eax
test   %rcx,%rcx
je     0x7ffff7c8d167 <__GI__IO_un_link+247>
mov    0x68(%rcx),%rdx
cmp    %rcx,%rbx
jne    0x7ffff7c8d21c <__GI__IO_un_link+428>
mov    %rdx,0x18e519(%rip)        # 0x7ffff7e1b680 <_IO_list_all>
and    $0x7f,%sil
mov    %esi,(%rbx)
test   %eax,%eax
jne    0x7ffff7c8d196 <__GI__IO_un_link+294>
mov    0x88(%rbx),%rdi
mov    0x4(%rdi),%eax
sub    $0x1,%eax
mov    %eax,0x4(%rdi)
jne    0x7ffff7c8d196 <__GI__IO_un_link+294>
movq   $0x0,0x8(%rdi)
xchg   %eax,(%rdi)
cmp    $0x1,%eax
jg     0x7ffff7c8d28d <__GI__IO_un_link+541>
mov    0x18f8b8(%rip),%eax        # 0x7ffff7e1ca54 <list_all_lock+4>
lea    -0x1(%rax),%edx
movq   $0x0,0x18f896(%rip)        # 0x7ffff7e1ca40 <run_fp>
mov    %edx,0x18f8a4(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
test   %edx,%edx
jne    0x7ffff7c8d1ce <__GI__IO_un_link+350>
movq   $0x0,0x18f899(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
xchg   %edx,0x18f88b(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
cmp    $0x1,%edx
jg     0x7ffff7c8d280 <__GI__IO_un_link+528>
mov    %rbp,%rdi
call   0x7ffff7c91200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7c91228 <__GI___libc_cleanup_pop_restore+40>
ret    
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8d2a1 <__GI__IO_un_link+561>
add    $0x38,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    0x0(%rbp),%eax
test   $0x80,%ah
jne    0x7ffff7c7ed76 <_IO_new_fclose+262>
mov    %fs:0x10,%rbx
mov    0x88(%rbp),%rdi
cmp    %rbx,0x8(%rdi)
je     0x7ffff7c7ed72 <_IO_new_fclose+258>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,(%rdi)
jne    0x7ffff7c7ee30 <_IO_new_fclose+448>
mov    0x88(%rbp),%rdi
mov    0x0(%rbp),%eax
mov    %rbx,0x8(%rdi)
addl   $0x1,0x4(%rdi)
mov    %eax,%edx
and    $0x8000,%edx
test   $0x20,%ah
je     0x7ffff7c7ec94 <_IO_new_fclose+36>
mov    %rbp,%rdi
call   0x7ffff7c8be90 <_IO_new_file_close_it>
endbr64 
push   %r12
push   %rbp
push   %rbx
mov    0x70(%rdi),%r12d
cmp    $0xffffffff,%r12d
je     0x7ffff7c8bf8c <_IO_new_file_close_it+252>
mov    (%rdi),%eax
mov    %rdi,%rbx
xor    %ebp,%ebp
and    $0x808,%eax
cmp    $0x800,%eax
je     0x7ffff7c8bf98 <_IO_new_file_close_it+264>
mov    %rbx,%rdi
xor    %r12d,%r12d
call   0x7ffff7c8f230 <__GI__IO_unsave_markers>
endbr64 
push   %rbx
cmpq   $0x0,0x60(%rdi)
mov    %rdi,%rbx
je     0x7ffff7c8f247 <__GI__IO_unsave_markers+23>
mov    0x48(%rbx),%rdi
test   %rdi,%rdi
je     0x7ffff7c8f26d <__GI__IO_unsave_markers+61>
pop    %rbx
ret    
testb  $0x20,0x74(%rbx)
jne    0x7ffff7c8bf03 <_IO_new_file_close_it+115>
mov    0xd8(%rbx),%r12
lea    0x18ab24(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x18b885(%rip),%rax        # 0x7ffff7e17768
sub    %rdx,%rax
mov    %r12,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c8bfe0 <_IO_new_file_close_it+336>
mov    %rbx,%rdi
call   *0x88(%r12)
endbr64 
mov    0x70(%rdi),%edi
jmp    0x7ffff7d19860 <__GI___close_nocancel>
endbr64 
mov    $0x3,%eax
syscall 
cmp    $0xfffffffffffff000,%rax
ja     0x7ffff7d19878 <__GI___close_nocancel+24>
ret    
mov    %eax,%r12d
mov    0xc0(%rbx),%eax
test   %eax,%eax
jle    0x7ffff7c8bf47 <_IO_new_file_close_it+183>
xor    %ecx,%ecx
xor    %edx,%edx
xor    %esi,%esi
mov    %rbx,%rdi
call   0x7ffff7c8dc20 <__GI__IO_setb>
endbr64 
push   %rbp
movq   %rsi,%xmm0
movq   %rdx,%xmm1
mov    %ecx,%ebp
push   %rbx
mov    %rdi,%rbx
punpcklqdq %xmm1,%xmm0
sub    $0x18,%rsp
mov    0x38(%rdi),%rdi
mov    (%rbx),%eax
test   %rdi,%rdi
je     0x7ffff7c8dc4c <__GI__IO_setb+44>
test   $0x1,%al
je     0x7ffff7c8dc70 <__GI__IO_setb+80>
movaps %xmm0,(%rsp)
call   0x7ffff7c28370 <free@plt>
endbr64 
bnd jmp *0x1f1aa5(%rip)        # 0x7ffff7e19e20
endbr64 
test   %rdi,%rdi
je     0x7ffff7ca54a8 <__GI___libc_free+200>
push   %rbp
lea    -0x10(%rdi),%rsi
push   %rbx
sub    $0x18,%rsp
mov    0x174a12(%rip),%rbx        # 0x7ffff7e19e10
mov    -0x8(%rdi),%rax
mov    %fs:(%rbx),%ebp
test   $0x2,%al
jne    0x7ffff7ca5460 <__GI___libc_free+128>
mov    0x174998(%rip),%rdx        # 0x7ffff7e19da8
cmpq   $0x0,%fs:(%rdx)
je     0x7ffff7ca54b0 <__GI___libc_free+208>
lea    0x17585e(%rip),%rdi        # 0x7ffff7e1ac80 <main_arena>
test   $0x4,%al
je     0x7ffff7ca544c <__GI___libc_free+108>
xor    %edx,%edx
call   0x7ffff7ca26a0 <_int_free>
push   %r15
push   %r14
push   %r13
mov    %edx,%r13d
push   %r12
push   %rbp
push   %rbx
sub    $0x38,%rsp
mov    0x8(%rsi),%rdx
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
mov    %rdx,%rbx
and    $0xfffffffffffffff8,%rbx
mov    %rbx,%rcx
neg    %rcx
cmp    %rcx,%rsi
ja     0x7ffff7ca2a38 <_int_free+920>
mov    %rsi,%rbp
test   $0xf,%sil
jne    0x7ffff7ca2a38 <_int_free+920>
cmp    $0x1f,%rbx
jbe    0x7ffff7ca2a48 <_int_free+936>
and    $0x8,%edx
jne    0x7ffff7ca2a48 <_int_free+936>
mov    0x1776a6(%rip),%rax        # 0x7ffff7e19da8
mov    %rdi,%r12
mov    %fs:(%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7ca274b <_int_free+171>
lea    -0x11(%rbx),%rcx
shr    $0x4,%rcx
cmp    %rcx,0x177cab(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
jbe    0x7ffff7ca274b <_int_free+171>
cmp    0x17edae(%rip),%rbx        # 0x7ffff7e21500 <global_max_fast>
ja     0x7ffff7ca2810 <_int_free+368>
testb  $0x2,0x8(%rbp)
jne    0x7ffff7ca29d0 <_int_free+816>
mov    %fs:0x18,%eax
test   %eax,%eax
je     0x7ffff7ca2830 <_int_free+400>
movl   $0x1,0x14(%rsp)
mov    0x60(%r12),%rax
lea    0x0(%rbp,%rbx,1),%r14
cmp    %rbp,%rax
je     0x7ffff7ca2e40 <_int_free+1952>
testb  $0x2,0x4(%r12)
je     0x7ffff7ca2e50 <_int_free+1968>
mov    0x8(%rax),%rdx
and    $0xfffffffffffffff8,%rdx
add    %rdx,%rax
cmp    %rax,%r14
jb     0x7ffff7ca2857 <_int_free+439>
mov    0x8(%r14),%rax
test   $0x1,%al
je     0x7ffff7ca2e70 <_int_free+2000>
mov    %rax,%r15
and    $0xfffffffffffffff8,%r15
cmp    $0x10,%rax
jbe    0x7ffff7ca2cd0 <_int_free+1584>
cmp    %r15,0x888(%r12)
jbe    0x7ffff7ca2cd0 <_int_free+1584>
mov    0x17ec74(%rip),%esi        # 0x7ffff7e214fc <perturb_byte>
test   %esi,%esi
jne    0x7ffff7ca2e80 <_int_free+2016>
testb  $0x1,0x8(%rbp)
jne    0x7ffff7ca28b9 <_int_free+537>
cmp    %r14,0x60(%r12)
je     0x7ffff7ca2c80 <_int_free+1504>
add    %r15,%rbx
mov    %rbx,%rax
or     $0x1,%rax
mov    %rax,0x8(%rbp)
mov    %rbp,0x60(%r12)
jmp    0x7ffff7ca2921 <_int_free+641>
cmp    $0xffff,%rbx
ja     0x7ffff7ca2ae0 <_int_free+1088>
mov    0x8(%r12),%eax
test   %eax,%eax
jne    0x7ffff7ca2e98 <_int_free+2040>
lea    0x17818c(%rip),%rax        # 0x7ffff7e1ac80 <main_arena>
cmp    %rax,%r12
mov    0x60(%r12),%rax
je     0x7ffff7ca2ea8 <_int_free+2056>
mov    0x8(%rax),%rax
and    $0xfffffffffffffff8,%rax
cmp    0x1774a9(%rip),%rax        # 0x7ffff7e1a360 <mp_>
jb     0x7ffff7ca292e <_int_free+654>
mov    0x14(%rsp),%eax
test   %eax,%eax
jne    0x7ffff7ca27e8 <_int_free+328>
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7ca2fc8 <_int_free+2344>
add    $0x38,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    %ebp,%fs:(%rbx)
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
mov    (%rbx),%eax
movdqa (%rsp),%xmm0
jmp    0x7ffff7c8dc4c <__GI__IO_setb+44>
mov    %eax,%edx
or     $0x1,%eax
movups %xmm0,0x38(%rbx)
and    $0xfffffffe,%edx
test   %ebp,%ebp
cmovne %edx,%eax
mov    %eax,(%rbx)
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
pxor   %xmm0,%xmm0
mov    %rbx,%rdi
movups %xmm0,0x8(%rbx)
movups %xmm0,0x18(%rbx)
movups %xmm0,0x28(%rbx)
call   0x7ffff7c8d2b0 <__GI__IO_un_link>
endbr64 
testb  $0x80,(%rdi)
jne    0x7ffff7c8d2c0 <__GI__IO_un_link+16>
ret    
test   %r12d,%r12d
movl   $0xfbad240c,(%rbx)
movl   $0xffffffff,0x70(%rbx)
cmove  %ebp,%r12d
movq   $0xffffffffffffffff,0x90(%rbx)
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
ret    
mov    0x0(%rbp),%edx
mov    %eax,%r12d
and    $0x8000,%edx
jmp    0x7ffff7c7ec9d <_IO_new_fclose+45>
test   %edx,%edx
jne    0x7ffff7c7ecb2 <_IO_new_fclose+66>
mov    0x88(%rbp),%rdi
subl   $0x1,0x4(%rdi)
je     0x7ffff7c7eda0 <_IO_new_fclose+304>
movq   $0x0,0x8(%rdi)
xchg   %edx,(%rdi)
cmp    $0x1,%edx
jle    0x7ffff7c7ecb2 <_IO_new_fclose+66>
mov    0xd8(%rbp),%rbx
lea    0x197d40(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x198aa1(%rip),%rax        # 0x7ffff7e17768
sub    %rdx,%rax
mov    %rbx,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c7ee10 <_IO_new_fclose+416>
xor    %esi,%esi
mov    %rbp,%rdi
call   *0x10(%rbx)
endbr64 
push   %rbp
mov    %rdi,%rbp
push   %rbx
sub    $0x8,%rsp
cmpl   $0xffffffff,0x70(%rdi)
je     0x7ffff7c8c05a <_IO_new_file_finish+106>
add    $0x8,%rsp
mov    %rbp,%rdi
xor    %esi,%esi
pop    %rbx
pop    %rbp
jmp    0x7ffff7c8e730 <__GI__IO_default_finish>
endbr64 
push   %rbp
mov    %rdi,%rbp
mov    0x38(%rdi),%rdi
test   %rdi,%rdi
je     0x7ffff7c8e747 <__GI__IO_default_finish+23>
mov    0x60(%rbp),%rax
test   %rax,%rax
je     0x7ffff7c8e760 <__GI__IO_default_finish+48>
mov    0x48(%rbp),%rdi
test   %rdi,%rdi
je     0x7ffff7c8e776 <__GI__IO_default_finish+70>
testb  $0x80,0x0(%rbp)
jne    0x7ffff7c8e790 <__GI__IO_default_finish+96>
pop    %rbp
ret    
mov    0xc0(%rbp),%eax
test   %eax,%eax
jg     0x7ffff7c7edc0 <_IO_new_fclose+336>
cmpq   $0x0,0x48(%rbp)
je     0x7ffff7c7ecfe <_IO_new_fclose+142>
cmp    0x19b273(%rip),%rbp        # 0x7ffff7e19f78
sete   %al
cmp    0x19b1e1(%rip),%rbp        # 0x7ffff7e19ef0
sete   %dl
or     %dl,%al
jne    0x7ffff7c7ed27 <_IO_new_fclose+183>
cmp    0x19b16b(%rip),%rbp        # 0x7ffff7e19e88
je     0x7ffff7c7ed27 <_IO_new_fclose+183>
mov    %rbp,%rdi
call   0x7ffff7c28370 <free@plt>
endbr64 
bnd jmp *0x1f1aa5(%rip)        # 0x7ffff7e19e20
endbr64 
test   %rdi,%rdi
je     0x7ffff7ca54a8 <__GI___libc_free+200>
push   %rbp
lea    -0x10(%rdi),%rsi
push   %rbx
sub    $0x18,%rsp
mov    0x174a12(%rip),%rbx        # 0x7ffff7e19e10
mov    -0x8(%rdi),%rax
mov    %fs:(%rbx),%ebp
test   $0x2,%al
jne    0x7ffff7ca5460 <__GI___libc_free+128>
mov    0x174998(%rip),%rdx        # 0x7ffff7e19da8
cmpq   $0x0,%fs:(%rdx)
je     0x7ffff7ca54b0 <__GI___libc_free+208>
lea    0x17585e(%rip),%rdi        # 0x7ffff7e1ac80 <main_arena>
test   $0x4,%al
je     0x7ffff7ca544c <__GI___libc_free+108>
xor    %edx,%edx
call   0x7ffff7ca26a0 <_int_free>
push   %r15
push   %r14
push   %r13
mov    %edx,%r13d
push   %r12
push   %rbp
push   %rbx
sub    $0x38,%rsp
mov    0x8(%rsi),%rdx
mov    %fs:0x28,%rax
mov    %rax,0x28(%rsp)
xor    %eax,%eax
mov    %rdx,%rbx
and    $0xfffffffffffffff8,%rbx
mov    %rbx,%rcx
neg    %rcx
cmp    %rcx,%rsi
ja     0x7ffff7ca2a38 <_int_free+920>
mov    %rsi,%rbp
test   $0xf,%sil
jne    0x7ffff7ca2a38 <_int_free+920>
cmp    $0x1f,%rbx
jbe    0x7ffff7ca2a48 <_int_free+936>
and    $0x8,%edx
jne    0x7ffff7ca2a48 <_int_free+936>
mov    0x1776a6(%rip),%rax        # 0x7ffff7e19da8
mov    %rdi,%r12
mov    %fs:(%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7ca274b <_int_free+171>
lea    -0x11(%rbx),%rcx
shr    $0x4,%rcx
cmp    %rcx,0x177cab(%rip)        # 0x7ffff7e1a3c8 <mp_+104>
jbe    0x7ffff7ca274b <_int_free+171>
mov    0x177cb2(%rip),%rdi        # 0x7ffff7e1a3d8 <mp_+120>
mov    0x17edab(%rip),%r11        # 0x7ffff7e214d8 <tcache_key>
lea    0x10(%rbp),%r8
cmp    %r11,0x18(%rbp)
je     0x7ffff7ca2de0 <_int_free+1856>
movzwl (%rsi,%rcx,2),%edx
mov    %rdx,%rax
cmp    %rdi,%rdx
jb     0x7ffff7ca2a00 <_int_free+864>
mov    0x17ead1(%rip),%rdx        # 0x7ffff7e214d8 <tcache_key>
add    $0x1,%eax
mov    %rdx,0x18(%rbp)
mov    %r8,%rdx
shr    $0xc,%rdx
xor    0x80(%rsi,%rcx,8),%rdx
mov    %rdx,0x10(%rbp)
mov    %r8,0x80(%rsi,%rcx,8)
mov    %ax,(%rsi,%rcx,2)
jmp    0x7ffff7ca27e8 <_int_free+328>
mov    0x28(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7ca2fc8 <_int_free+2344>
add    $0x38,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    %ebp,%fs:(%rbx)
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
ret    
nop
mov    -0x8(%rbp),%rax
sub    %fs:0x28,%rax
je     0x555555555d35 <loadimage+247>
leave  
ret    
jmp    0x5555555563a3 <main+1356>
mov    $0x0,%eax
mov    -0x8(%rbp),%rdx
sub    %fs:0x28,%rdx
je     0x5555555563bc <main+1381>
leave  
ret    
mov    %eax,%edi
call   0x7ffff7c455f0 <__GI_exit>
endbr64 
push   %rax
pop    %rax
mov    $0x1,%ecx
mov    $0x1,%edx
lea    0x1d5231(%rip),%rsi        # 0x7ffff7e1a838 <__exit_funcs>
sub    $0x8,%rsp
call   0x7ffff7c45390 <__run_exit_handlers>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
mov    %rsi,%r12
push   %rbp
mov    %edi,%ebp
push   %rbx
sub    $0x28,%rsp
mov    %edx,0x1c(%rsp)
test   %cl,%cl
jne    0x7ffff7c455c4 <__run_exit_handlers+564>
call   0x7ffff7c45d60 <__GI___call_tls_dtors>
endbr64 
push   %rbp
push   %rbx
sub    $0x8,%rsp
mov    0x1d401f(%rip),%rbx        # 0x7ffff7e19d90
mov    %fs:(%rbx),%rbp
test   %rbp,%rbp
je     0x7ffff7c45dbd <__GI___call_tls_dtors+93>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
ret    
jmp    0x7ffff7c453b3 <__run_exit_handlers+35>
lea    0x1d6b2e(%rip),%r14        # 0x7ffff7e1bee8 <__exit_funcs_lock>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,(%r14)
jne    0x7ffff7c455ce <__run_exit_handlers+574>
xor    %ebx,%ebx
mov    (%r12),%r15
test   %r15,%r15
je     0x7ffff7c45510 <__run_exit_handlers+384>
nopl   0x0(%rax,%rax,1)
mov    0x8(%r15),%rax
test   %rax,%rax
je     0x7ffff7c45500 <__run_exit_handlers+368>
sub    $0x1,%rax
mov    %rax,%rdx
mov    %rax,0x8(%r15)
shl    $0x5,%rdx
mov    0x10(%r15,%rdx,1),%rcx
cmp    $0x3,%rcx
je     0x7ffff7c454b8 <__run_exit_handlers+296>
cmp    $0x4,%rcx
je     0x7ffff7c45460 <__run_exit_handlers+208>
add    %r15,%rdx
mov    0x18(%rdx),%rax
mov    0x20(%rdx),%r13
movq   $0x0,0x10(%rdx)
mov    %ebx,%edx
ror    $0x11,%rax
xor    %fs:0x30,%rax
xchg   %edx,(%r14)
cmp    $0x1,%edx
jg     0x7ffff7c455a0 <__run_exit_handlers+528>
mov    %ebp,%esi
mov    %r13,%rdi
call   *%rax
endbr64 
push   %rbp
mov    %rsp,%rbp
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbx
sub    $0x38,%rsp
mov    0x349e4(%rip),%r12        # 0x7ffff7ffda40 <_rtld_global+2560>
sub    $0x1,%r12
js     0x7ffff7fc9301 <_dl_fini+705>
movl   $0x0,-0x44(%rbp)
lea    0x349d4(%rip),%r13        # 0x7ffff7ffda48 <_rtld_global+2568>
lea    (%r12,%r12,4),%rbx
lea    0x33fc1(%rip),%rax        # 0x7ffff7ffd040 <_rtld_global>
shl    $0x5,%rbx
add    %rax,%rbx
jmp    0x7ffff7fc90ae <_dl_fini+110>
mov    %r13,%rdi
call   *0x339c9(%rip)        # 0x7ffff7ffca80 <___rtld_mutex_lock>
endbr64 
mov    0x10(%rdi),%eax
mov    %eax,%edx
and    $0x17f,%edx
nop
and    $0x7c,%eax
jne    0x7ffff7c97fb0 <___pthread_mutex_lock+192>
push   %rbx
sub    $0x10,%rsp
test   %edx,%edx
jne    0x7ffff7c97fb8 <___pthread_mutex_lock+200>
cmp    $0x100,%edx
je     0x7ffff7c97f96 <___pthread_mutex_lock+166>
mov    0x10(%rdi),%edx
and    $0x7f,%edx
cmp    $0x1,%edx
jne    0x7ffff7c98064 <___pthread_mutex_lock+372>
mov    %fs:0x2d0,%eax
cmp    %eax,0x8(%rdi)
jne    0x7ffff7c9800c <___pthread_mutex_lock+284>
mov    0x10(%rdi),%esi
and    $0x80,%esi
jne    0x7ffff7c98046 <___pthread_mutex_lock+342>
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7c98046 <___pthread_mutex_lock+342>
mov    (%rdi),%edx
test   %edx,%edx
jne    0x7ffff7c98046 <___pthread_mutex_lock+342>
movl   $0x1,(%rdi)
mov    0x8(%rdi),%eax
test   %eax,%eax
jne    0x7ffff7c9816e <___pthread_mutex_lock+638>
movl   $0x1,0x4(%rdi)
jmp    0x7ffff7c97f55 <___pthread_mutex_lock+101>
mov    %fs:0x2d0,%eax
mov    %eax,0x8(%rdi)
addl   $0x1,0xc(%rdi)
nop
xor    %eax,%eax
add    $0x10,%rsp
pop    %rbx
ret    
mov    0x8(%rbx),%r15d
test   %r15d,%r15d
je     0x7ffff7fc9090 <_dl_fini+80>
mov    (%rbx),%rax
movzbl 0x31d(%rax),%eax
shr    $0x7,%al
movzbl %al,%eax
cmp    -0x44(%rbp),%eax
jne    0x7ffff7fc9090 <_dl_fini+80>
mov    $0x2,%esi
mov    %r12,%rdi
mov    %rsp,-0x58(%rbp)
call   0x7ffff7fde250 <_dl_audit_activity_nsid>
endbr64 
push   %r13
lea    (%rdi,%rdi,4),%rax
push   %r12
shl    $0x5,%rax
push   %rbp
lea    0x1edd8(%rip),%rbp        # 0x7ffff7ffd040 <_rtld_global>
push   %rbx
sub    $0x8,%rsp
mov    0x0(%rbp,%rax,1),%rbx
mov    0x1ec00(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %rbx,%rbx
je     0x7ffff7fde281 <_dl_audit_activity_nsid+49>
test   %eax,%eax
jne    0x7ffff7fde290 <_dl_audit_activity_nsid+64>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    %r15d,%eax
mov    %rsp,%rdx
lea    0xf(,%rax,8),%rax
shr    $0x4,%rax
shl    $0x4,%rax
mov    %rax,%rcx
and    $0xfffffffffffff000,%rcx
sub    %rcx,%rdx
cmp    %rdx,%rsp
je     0x7ffff7fc9123 <_dl_fini+227>
and    $0xfff,%eax
sub    %rax,%rsp
test   %rax,%rax
jne    0x7ffff7fc9333 <_dl_fini+755>
orq    $0x0,-0x8(%rsp,%rax,1)
jmp    0x7ffff7fc9134 <_dl_fini+244>
mov    (%rbx),%rax
mov    %rsp,%r14
xor    %esi,%esi
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %esi,%r15d
sete   %al
test   %r12,%r12
jne    0x7ffff7fc9192 <_dl_fini+338>
test   %al,%al
je     0x7ffff7fc93bc <_dl_fini+892>
test   %r12,%r12
sete   %dl
test   %al,%al
jne    0x7ffff7fc91ad <_dl_fini+365>
movzbl %dl,%edx
mov    $0x1,%ecx
mov    %r14,%rdi
mov    %esi,-0x38(%rbp)
call   0x7ffff7fd6730 <_dl_sort_maps>
endbr64 
push   %rbp
mov    %rdi,%r8
mov    %rsp,%rbp
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbx
sub    $0x78,%rsp
mov    0x266b9(%rip),%r13d        # 0x7ffff7ffce08 <_rtld_global_ro+808>
mov    %cl,-0x51(%rbp)
test   %r13d,%r13d
jne    0x7ffff7fd69cd <_dl_sort_maps+669>
mov    %esi,%r9d
mov    %ecx,%eax
mov    %rsp,%rbx
shl    $0x3,%r9
sub    $0x1,%esi
movslq %esi,%rcx
js     0x7ffff7fd6b02 <_dl_sort_maps+978>
mov    %rcx,%rdx
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
lea    0xf(%r9),%rdx
mov    %rsp,%rsi
shr    $0x4,%rdx
shl    $0x4,%rdx
mov    %rdx,%rdi
and    $0xfffffffffffff000,%rdi
sub    %rdi,%rsi
cmp    %rsi,%rsp
je     0x7ffff7fd6a31 <_dl_sort_maps+769>
and    $0xfff,%edx
sub    %rdx,%rsp
test   %rdx,%rdx
je     0x7ffff7fd6a45 <_dl_sort_maps+789>
orq    $0x0,-0x8(%rsp,%rdx,1)
mov    %rsp,%r11
test   %al,%al
lea    -0x41(%rbp),%r13
mov    $0x0,%eax
lea    (%r11,%r9,1),%rdx
movb   $0x0,-0x41(%rbp)
cmove  %rax,%r13
mov    %r11,%r14
mov    %rdx,-0x40(%rbp)
mov    %rcx,%r12
lea    -0x40(%rbp),%r15
mov    %rcx,%r10
jmp    0x7ffff7fd6a85 <_dl_sort_maps+853>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
mov    (%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7fd666b <dfs_traversal+75>
mov    $0x8,%ebx
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
mov    (%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7fd666b <dfs_traversal+75>
mov    $0x8,%ebx
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
mov    (%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7fd666b <dfs_traversal+75>
mov    $0x8,%ebx
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
cmpb   $0x0,-0x41(%rbp)
je     0x7ffff7fd6b7e <_dl_sort_maps+1102>
mov    %r9,%rdx
mov    %r14,%rsi
mov    %r8,%rdi
call   0x7ffff7fedfb0 <memmove>
endbr64 
mov    %rdi,%rax
cmp    $0x10,%rdx
jb     0x7ffff7fedfe0 <memmove+48>
movups (%rsi),%xmm0
cmp    $0x20,%rdx
ja     0x7ffff7fee040 <memmove+144>
cmp    $0x80,%rdx
ja     0x7ffff7fee093 <memmove+227>
movups 0x10(%rsi),%xmm1
cmp    $0x40,%rdx
jbe    0x7ffff7fee021 <memmove+113>
movups -0x10(%rsi,%rdx,1),%xmm2
movups -0x20(%rsi,%rdx,1),%xmm3
movups %xmm0,(%rdi)
movups %xmm1,0x10(%rdi)
movups %xmm2,-0x10(%rdi,%rdx,1)
movups %xmm3,-0x20(%rdi,%rdx,1)
ret    
jmp    0x7ffff7fd6afa <_dl_sort_maps+970>
mov    %rbx,%rsp
jmp    0x7ffff7fd6870 <_dl_sort_maps+320>
lea    -0x28(%rbp),%rsp
pop    %rbx
pop    %r12
pop    %r13
pop    %r14
pop    %r15
pop    %rbp
ret    
mov    %r13,%rdi
call   *0x338af(%rip)        # 0x7ffff7ffca78 <___rtld_mutex_unlock>
endbr64 
mov    0x10(%rdi),%eax
mov    %eax,%edx
and    $0x17f,%edx
and    $0x7c,%eax
jne    0x7ffff7c99ad0 <___pthread_mutex_unlock+96>
sub    $0x18,%rsp
test   %edx,%edx
jne    0x7ffff7c99ae0 <___pthread_mutex_unlock+112>
cmp    $0x100,%edx
jne    0x7ffff7c99b17 <___pthread_mutex_unlock+167>
mov    0x10(%rdi),%ecx
and    $0x7f,%ecx
cmp    $0x1,%ecx
jne    0x7ffff7c99b48 <___pthread_mutex_unlock+216>
mov    %fs:0x2d0,%edx
cmp    %edx,0x8(%rdi)
je     0x7ffff7c99b39 <___pthread_mutex_unlock+201>
subl   $0x1,0x4(%rdi)
jne    0x7ffff7c99aac <___pthread_mutex_unlock+60>
jmp    0x7ffff7c99a8c <___pthread_mutex_unlock+28>
subl   $0x1,0xc(%rdi)
movl   $0x0,0x8(%rdi)
mov    0x10(%rdi),%esi
and    $0x80,%esi
je     0x7ffff7c99ab8 <___pthread_mutex_unlock+72>
mov    %fs:0x18,%edx
test   %edx,%edx
jne    0x7ffff7c99aa2 <___pthread_mutex_unlock+50>
movl   $0x0,(%rdi)
jmp    0x7ffff7c99aab <___pthread_mutex_unlock+59>
nop
add    $0x18,%rsp
ret    
mov    -0x38(%rbp),%esi
test   %esi,%esi
je     0x7ffff7fc9292 <_dl_fini+594>
lea    -0x1(%rsi),%eax
lea    0x8(%r14,%rax,8),%rax
mov    %rax,-0x50(%rbp)
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
testb  $0x2,0x338cc(%rip)        # 0x7ffff7ffcae0 <_rtld_global_ro>
jne    0x7ffff7fc92c0 <_dl_fini+640>
mov    0x8(%rax),%rax
add    (%r15),%rax
mov    %rax,%rsi
mov    %rax,-0x40(%rbp)
mov    0x120(%r15),%rax
mov    0x8(%rax),%rdx
shr    $0x3,%rdx
lea    -0x1(%rdx),%eax
lea    (%rsi,%rax,8),%rax
test   %edx,%edx
je     0x7ffff7fc925f <_dl_fini+543>
nopw   0x0(%rax,%rax,1)
mov    %rax,-0x38(%rbp)
call   *(%rax)
endbr64 
cmpb   $0x0,0x3db5(%rip)        # 0x555555559020 <completed.0>
jne    0x555555555298 <__do_global_dtors_aux+56>
push   %rbp
cmpq   $0x0,0x3d82(%rip)        # 0x555555558ff8
mov    %rsp,%rbp
je     0x555555555287 <__do_global_dtors_aux+39>
mov    0x3d86(%rip),%rdi        # 0x555555559008
call   0x5555555550f0 <__cxa_finalize@plt>
endbr64 
bnd jmp *0x3efd(%rip)        # 0x555555558ff8
endbr64 
push   %r15
xor    %eax,%eax
mov    $0x1,%edx
push   %r14
push   %r13
push   %r12
mov    %rdi,%r12
push   %rbp
push   %rbx
sub    $0x18,%rsp
lea    0x1d6525(%rip),%r13        # 0x7ffff7e1bee8 <__exit_funcs_lock>
lock cmpxchg %edx,0x0(%r13)
jne    0x7ffff7c45c13 <__cxa_finalize+627>
nop
mov    0x1d4e61(%rip),%r14        # 0x7ffff7e1a838 <__exit_funcs>
test   %r14,%r14
je     0x7ffff7c45a8c <__cxa_finalize+236>
mov    0x8(%r14),%rax
lea    0x10(%r14),%rbp
shl    $0x5,%rax
lea    -0x10(%r14,%rax,1),%rbx
cmp    %rbp,%rbx
jb     0x7ffff7c45a80 <__cxa_finalize+224>
mov    (%r14),%r14
test   %r14,%r14
jne    0x7ffff7c459e0 <__cxa_finalize+64>
mov    0x1d4dad(%rip),%rcx        # 0x7ffff7e1a840 <__quick_exit_funcs>
test   %rcx,%rcx
je     0x7ffff7c45ade <__cxa_finalize+318>
nopl   0x0(%rax,%rax,1)
mov    0x8(%rcx),%rax
lea    0x10(%rcx),%rdx
shl    $0x5,%rax
lea    -0x10(%rcx,%rax,1),%rax
cmp    %rax,%rdx
ja     0x7ffff7c45ad6 <__cxa_finalize+310>
mov    (%rcx),%rcx
test   %rcx,%rcx
jne    0x7ffff7c45aa0 <__cxa_finalize+256>
test   %r12,%r12
je     0x7ffff7c45aeb <__cxa_finalize+331>
mov    %r12,%rdi
call   0x7ffff7ceadd0 <__unregister_atfork>
endbr64 
push   %rbx
xor    %eax,%eax
mov    %rdi,%rbx
mov    $0x1,%edx
lock cmpxchg %edx,0x136cd9(%rip)        # 0x7ffff7e21ac0 <atfork_lock>
jne    0x7ffff7ceaee0 <__unregister_atfork+272>
mov    0x136cec(%rip),%rsi        # 0x7ffff7e21ae0 <fork_handlers>
test   %rsi,%rsi
je     0x7ffff7ceaeb0 <__unregister_atfork+224>
xor    %eax,%eax
xchg   %eax,0x136c08(%rip)        # 0x7ffff7e21ac0 <atfork_lock>
cmp    $0x1,%eax
jg     0x7ffff7ceaed0 <__unregister_atfork+256>
pop    %rbx
ret    
xor    %eax,%eax
xchg   %eax,0x0(%r13)
cmp    $0x1,%eax
jg     0x7ffff7c45c20 <__cxa_finalize+640>
add    $0x18,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
call   0x5555555551f0 <deregister_tm_clones>
lea    0x3e19(%rip),%rdi        # 0x555555559010
lea    0x3e12(%rip),%rax        # 0x555555559010
cmp    %rdi,%rax
je     0x555555555218 <deregister_tm_clones+40>
ret    
movb   $0x1,0x3d8d(%rip)        # 0x555555559020 <completed.0>
pop    %rbp
ret    
mov    -0x38(%rbp),%rax
mov    %rax,%rdx
sub    $0x8,%rax
cmp    %rdx,-0x40(%rbp)
jne    0x7ffff7fc9248 <_dl_fini+520>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    0x8(%rax),%rax
add    (%r15),%rax
call   *%rax
endbr64 
sub    $0x8,%rsp
add    $0x8,%rsp
ret    
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
testb  $0x2,0x338cc(%rip)        # 0x7ffff7ffcae0 <_rtld_global_ro>
jne    0x7ffff7fc92c0 <_dl_fini+640>
mov    0x8(%rax),%rax
add    (%r15),%rax
mov    %rax,%rsi
mov    %rax,-0x40(%rbp)
mov    0x120(%r15),%rax
mov    0x8(%rax),%rdx
shr    $0x3,%rdx
lea    -0x1(%rdx),%eax
lea    (%rsi,%rax,8),%rax
test   %edx,%edx
je     0x7ffff7fc925f <_dl_fini+543>
nopw   0x0(%rax,%rax,1)
mov    %rax,-0x38(%rbp)
call   *(%rax)
endbr64 
cmpb   $0x0,0xd7cd1(%rip)        # 0x7ffff7fa70fc <completed.0>
jne    0x7ffff7ecf458 <__do_global_dtors_aux+56>
push   %rbp
cmpq   $0x0,0xd7bba(%rip)        # 0x7ffff7fa6ff0
mov    %rsp,%rbp
je     0x7ffff7ecf447 <__do_global_dtors_aux+39>
mov    0xd7cae(%rip),%rdi        # 0x7ffff7fa70f0
call   0x7ffff7ecf1e0 <__cxa_finalize@plt>
endbr64 
bnd jmp *0xd7e05(%rip)        # 0x7ffff7fa6ff0
endbr64 
push   %r15
xor    %eax,%eax
mov    $0x1,%edx
push   %r14
push   %r13
push   %r12
mov    %rdi,%r12
push   %rbp
push   %rbx
sub    $0x18,%rsp
lea    0x1d6525(%rip),%r13        # 0x7ffff7e1bee8 <__exit_funcs_lock>
lock cmpxchg %edx,0x0(%r13)
jne    0x7ffff7c45c13 <__cxa_finalize+627>
nop
mov    0x1d4e61(%rip),%r14        # 0x7ffff7e1a838 <__exit_funcs>
test   %r14,%r14
je     0x7ffff7c45a8c <__cxa_finalize+236>
mov    0x8(%r14),%rax
lea    0x10(%r14),%rbp
shl    $0x5,%rax
lea    -0x10(%r14,%rax,1),%rbx
cmp    %rbp,%rbx
jb     0x7ffff7c45a80 <__cxa_finalize+224>
mov    (%r14),%r14
test   %r14,%r14
jne    0x7ffff7c459e0 <__cxa_finalize+64>
mov    0x1d4dad(%rip),%rcx        # 0x7ffff7e1a840 <__quick_exit_funcs>
test   %rcx,%rcx
je     0x7ffff7c45ade <__cxa_finalize+318>
nopl   0x0(%rax,%rax,1)
mov    0x8(%rcx),%rax
lea    0x10(%rcx),%rdx
shl    $0x5,%rax
lea    -0x10(%rcx,%rax,1),%rax
cmp    %rax,%rdx
ja     0x7ffff7c45ad6 <__cxa_finalize+310>
mov    (%rcx),%rcx
test   %rcx,%rcx
jne    0x7ffff7c45aa0 <__cxa_finalize+256>
test   %r12,%r12
je     0x7ffff7c45aeb <__cxa_finalize+331>
mov    %r12,%rdi
call   0x7ffff7ceadd0 <__unregister_atfork>
endbr64 
push   %rbx
xor    %eax,%eax
mov    %rdi,%rbx
mov    $0x1,%edx
lock cmpxchg %edx,0x136cd9(%rip)        # 0x7ffff7e21ac0 <atfork_lock>
jne    0x7ffff7ceaee0 <__unregister_atfork+272>
mov    0x136cec(%rip),%rsi        # 0x7ffff7e21ae0 <fork_handlers>
test   %rsi,%rsi
je     0x7ffff7ceaeb0 <__unregister_atfork+224>
xor    %eax,%eax
xchg   %eax,0x136c08(%rip)        # 0x7ffff7e21ac0 <atfork_lock>
cmp    $0x1,%eax
jg     0x7ffff7ceaed0 <__unregister_atfork+256>
pop    %rbx
ret    
xor    %eax,%eax
xchg   %eax,0x0(%r13)
cmp    $0x1,%eax
jg     0x7ffff7c45c20 <__cxa_finalize+640>
add    $0x18,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
call   0x7ffff7ecf3b0 <deregister_tm_clones>
lea    0xd7d49(%rip),%rdi        # 0x7ffff7fa7100 <signgam>
lea    0xd7d42(%rip),%rax        # 0x7ffff7fa7100 <signgam>
cmp    %rdi,%rax
je     0x7ffff7ecf3d8 <deregister_tm_clones+40>
ret    
movb   $0x1,0xd7ca9(%rip)        # 0x7ffff7fa70fc <completed.0>
pop    %rbp
ret    
mov    -0x38(%rbp),%rax
mov    %rax,%rdx
sub    $0x8,%rax
cmp    %rdx,-0x40(%rbp)
jne    0x7ffff7fc9248 <_dl_fini+520>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    0x8(%rax),%rax
add    (%r15),%rax
call   *%rax
endbr64 
sub    $0x8,%rsp
add    $0x8,%rsp
ret    
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
xor    %esi,%esi
mov    %r12,%rdi
call   0x7ffff7fde250 <_dl_audit_activity_nsid>
endbr64 
push   %r13
lea    (%rdi,%rdi,4),%rax
push   %r12
shl    $0x5,%rax
push   %rbp
lea    0x1edd8(%rip),%rbp        # 0x7ffff7ffd040 <_rtld_global>
push   %rbx
sub    $0x8,%rsp
mov    0x0(%rbp,%rax,1),%rbx
mov    0x1ec00(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %rbx,%rbx
je     0x7ffff7fde281 <_dl_audit_activity_nsid+49>
test   %eax,%eax
jne    0x7ffff7fde290 <_dl_audit_activity_nsid+64>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    -0x58(%rbp),%rsp
jmp    0x7ffff7fc9099 <_dl_fini+89>
sub    $0x1,%r12
sub    $0xa0,%rbx
cmp    $0xffffffffffffffff,%r12
je     0x7ffff7fc92f0 <_dl_fini+688>
mov    -0x44(%rbp),%edx
test   %edx,%edx
jne    0x7ffff7fc9301 <_dl_fini+705>
mov    0x33b7b(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fc933e <_dl_fini+766>
testb  $0x80,0x337d8(%rip)        # 0x7ffff7ffcae0 <_rtld_global_ro>
jne    0x7ffff7fc9360 <_dl_fini+800>
lea    -0x28(%rbp),%rsp
pop    %rbx
pop    %r12
pop    %r13
pop    %r14
pop    %r15
pop    %rbp
ret    
mov    $0x1,%edx
mov    %ebx,%eax
lock cmpxchg %edx,(%r14)
je     0x7ffff7c453e0 <__run_exit_handlers+80>
mov    0x8(%r15),%rax
test   %rax,%rax
je     0x7ffff7c45500 <__run_exit_handlers+368>
mov    (%r15),%rax
mov    %rax,(%r12)
test   %rax,%rax
jne    0x7ffff7c455b7 <__run_exit_handlers+551>
movb   $0x1,0x1d69b5(%rip)        # 0x7ffff7e1becc <__exit_funcs_done>
xor    %eax,%eax
xchg   %eax,(%r14)
cmp    $0x1,%eax
jg     0x7ffff7c455db <__run_exit_handlers+587>
cmpb   $0x0,0x1c(%rsp)
je     0x7ffff7c4554b <__run_exit_handlers+443>
lea    0x1d14c5(%rip),%rbx        # 0x7ffff7e169f8 <__elf_set___libc_atexit_element__IO_cleanup__>
lea    0x1d14c6(%rip),%r12        # 0x7ffff7e16a00 <_IO_helper_jumps>
cmp    %r12,%rbx
jae    0x7ffff7c4554b <__run_exit_handlers+443>
nop
call   *(%rbx)
endbr64 
push   %r15
xor    %edi,%edi
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x48,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x38(%rsp)
xor    %eax,%eax
lea    0x10(%rsp),%rbp
call   0x7ffff7c8e8e0 <_IO_flush_all_lockp>
endbr64 
push   %r15
push   %r14
mov    %edi,%r14d
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x48,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x38(%rsp)
xor    %eax,%eax
lea    0x10(%rsp),%r13
lea    -0x1931(%rip),%rax        # 0x7ffff7c8cfe0 <flush_cleanup>
movq   $0x0,0x18(%rsp)
mov    %r13,%rdi
mov    %rax,0x10(%rsp)
call   0x7ffff7c911c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%rbx
cmp    %rbx,0x18e121(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
je     0x7ffff7c8e955 <_IO_flush_all_lockp+117>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,0x18e108(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
jne    0x7ffff7c8eafc <_IO_flush_all_lockp+540>
mov    %rbx,0x18e103(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
mov    0x18e0f9(%rip),%eax        # 0x7ffff7e1ca54 <list_all_lock+4>
mov    0x18cd1e(%rip),%r15        # 0x7ffff7e1b680 <_IO_list_all>
xor    %r12d,%r12d
lea    0x1(%rax),%edx
mov    %edx,0x18e0e6(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
test   %r15,%r15
je     0x7ffff7c8ea99 <_IO_flush_all_lockp+441>
lea    0x188082(%rip),%rbp        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x188de3(%rip),%rbx        # 0x7ffff7e17768
sub    %rbp,%rbx
jmp    0x7ffff7c8ea1c <_IO_flush_all_lockp+316>
mov    %r15,0x18e01d(%rip)        # 0x7ffff7e1ca40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7c8ea66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7c8e990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7c8e9a1 <_IO_flush_all_lockp+193>
jmp    0x7ffff7c8e9ce <_IO_flush_all_lockp+238>
test   %r14d,%r14d
je     0x7ffff7c8ea08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18e02d(%rip)        # 0x7ffff7e1ca40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ea90 <_IO_flush_all_lockp+432>
mov    %r15,0x18e01d(%rip)        # 0x7ffff7e1ca40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7c8ea66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7c8e990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7c8e9a1 <_IO_flush_all_lockp+193>
mov    0xd8(%r15),%rax
mov    %rax,%rsi
sub    %rbp,%rsi
cmp    %rsi,%rbx
jbe    0x7ffff7c8eae8 <_IO_flush_all_lockp+520>
mov    $0xffffffff,%esi
mov    %r15,%rdi
call   *0x18(%rax)
endbr64 
push   %r12
push   %rbp
mov    %rdi,%rbp
push   %rbx
mov    (%rdi),%eax
test   $0x8,%al
jne    0x7ffff7c8cfc0 <_IO_new_file_overflow+512>
mov    %esi,%ebx
mov    0x20(%rdi),%rsi
test   $0x8,%ah
je     0x7ffff7c8ce30 <_IO_new_file_overflow+112>
test   %rsi,%rsi
je     0x7ffff7c8cf58 <_IO_new_file_overflow+408>
mov    0x28(%rdi),%rdx
cmp    $0xffffffff,%ebx
je     0x7ffff7c8ce9c <_IO_new_file_overflow+220>
pop    %rbx
mov    %rbp,%rdi
sub    %rsi,%rdx
pop    %rbp
pop    %r12
jmp    0x7ffff7c8c930 <_IO_new_do_write>
endbr64 
xor    %eax,%eax
test   %rdx,%rdx
jne    0x7ffff7c8c940 <_IO_new_do_write+16>
push   %r15
lea    0x18a0b7(%rip),%r15        # 0x7ffff7e16a00 <_IO_helper_jumps>
push   %r14
push   %r13
lea    0x18ae14(%rip),%r13        # 0x7ffff7e17768
push   %r12
sub    %r15,%r13
mov    %rsi,%r12
push   %rbp
mov    %rdx,%rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x8,%rsp
mov    0xd8(%rdi),%r14
testl  $0x1000,(%rdi)
jne    0x7ffff7c8ca40 <_IO_new_do_write+272>
mov    0x10(%rdi),%rax
mov    0x20(%rdi),%rsi
cmp    %rsi,%rax
je     0x7ffff7c8c9c5 <_IO_new_do_write+149>
mov    %r14,%rax
sub    %r15,%rax
cmp    %r13,%rax
jae    0x7ffff7c8ca80 <_IO_new_do_write+336>
mov    %rbp,%rdx
mov    %r12,%rsi
mov    %rbx,%rdi
call   *0x78(%r14)
endbr64 
push   %r13
mov    %rdi,%r13
push   %r12
push   %rbp
push   %rbx
sub    $0x8,%rsp
test   %rdx,%rdx
jle    0x7ffff7c8af58 <_IO_new_file_write+152>
mov    %rsi,%rbp
mov    %rdx,%r12
mov    %rdx,%rbx
jmp    0x7ffff7c8aefd <_IO_new_file_write+61>
mov    0x70(%r13),%edi
mov    %rbx,%rdx
mov    %rbp,%rsi
testb  $0x2,0x74(%r13)
je     0x7ffff7c8aee8 <_IO_new_file_write+40>
call   0x7ffff7d14870 <__GI___libc_write>
endbr64 
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7d14890 <__GI___libc_write+32>
mov    $0x1,%eax
syscall 
cmp    $0xfffffffffffff000,%rax
ja     0x7ffff7d148e0 <__GI___libc_write+112>
ret    
test   %rax,%rax
js     0x7ffff7c8af20 <_IO_new_file_write+96>
sub    %rax,%rbx
add    %rax,%rbp
test   %rbx,%rbx
jle    0x7ffff7c8af50 <_IO_new_file_write+144>
mov    %r12,%rax
sub    %rbx,%rax
jmp    0x7ffff7c8af2b <_IO_new_file_write+107>
mov    0x90(%r13),%rdx
test   %rdx,%rdx
js     0x7ffff7c8af41 <_IO_new_file_write+129>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    %rax,%r13
movzwl 0x80(%rbx),%eax
test   %r13,%r13
je     0x7ffff7c8c9f5 <_IO_new_do_write+197>
test   %ax,%ax
jne    0x7ffff7c8ca60 <_IO_new_do_write+304>
mov    0x38(%rbx),%rax
mov    0xc0(%rbx),%edx
movq   %rax,%xmm0
mov    %rax,0x28(%rbx)
punpcklqdq %xmm0,%xmm0
movups %xmm0,0x8(%rbx)
movups %xmm0,0x18(%rbx)
test   %edx,%edx
jle    0x7ffff7c8ca50 <_IO_new_do_write+288>
testl  $0x202,(%rbx)
jne    0x7ffff7c8ca1c <_IO_new_do_write+236>
jmp    0x7ffff7c8ca18 <_IO_new_do_write+232>
mov    0x40(%rbx),%rax
mov    %rax,0x30(%rbx)
xor    %eax,%eax
cmp    %r13,%rbp
setne  %al
neg    %eax
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
cmp    $0xffffffff,%eax
mov    $0xffffffff,%eax
cmove  %eax,%r12d
test   %r14d,%r14d
je     0x7ffff7c8ea08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18e02d(%rip)        # 0x7ffff7e1ca40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ea90 <_IO_flush_all_lockp+432>
mov    %r15,0x18e01d(%rip)        # 0x7ffff7e1ca40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7c8ea66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7c8e990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7c8e9a1 <_IO_flush_all_lockp+193>
jmp    0x7ffff7c8e9ce <_IO_flush_all_lockp+238>
test   %r14d,%r14d
je     0x7ffff7c8ea08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18e02d(%rip)        # 0x7ffff7e1ca40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ea90 <_IO_flush_all_lockp+432>
mov    0x18dfbe(%rip),%eax        # 0x7ffff7e1ca54 <list_all_lock+4>
sub    $0x1,%eax
mov    %eax,0x18dfb5(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
test   %eax,%eax
jne    0x7ffff7c8eab9 <_IO_flush_all_lockp+473>
movq   $0x0,0x18dfaa(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
xchg   %eax,0x18df9c(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
cmp    $0x1,%eax
jg     0x7ffff7c8eb0d <_IO_flush_all_lockp+557>
mov    %r13,%rdi
call   0x7ffff7c91200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7c91228 <__GI___libc_cleanup_pop_restore+40>
ret    
mov    0x38(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8eb42 <_IO_flush_all_lockp+610>
add    $0x48,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    %rbp,%rdi
movq   $0x0,0x18(%rsp)
mov    %eax,%r12d
lea    -0x1bb4(%rip),%rax        # 0x7ffff7c8cfe0 <flush_cleanup>
mov    %rax,0x10(%rsp)
call   0x7ffff7c911c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%rbx
cmp    0x18deaa(%rip),%rbx        # 0x7ffff7e1ca58 <list_all_lock+8>
je     0x7ffff7c8ebcc <_IO_cleanup+124>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,0x18de91(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
jne    0x7ffff7c8ed9d <_IO_cleanup+589>
mov    %rbx,0x18de8c(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
mov    0x18de82(%rip),%eax        # 0x7ffff7e1ca54 <list_all_lock+4>
mov    0x18caa7(%rip),%r15        # 0x7ffff7e1b680 <_IO_list_all>
lea    0x1(%rax),%edx
mov    %edx,0x18de72(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
test   %r15,%r15
je     0x7ffff7c8ed11 <_IO_cleanup+449>
lea    0x187e0e(%rip),%r13        # 0x7ffff7e16a00 <_IO_helper_jumps>
lea    0x188b6f(%rip),%rbx        # 0x7ffff7e17768
sub    %r13,%rbx
jmp    0x7ffff7c8ec18 <_IO_cleanup+200>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7c8ec00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ed08 <_IO_cleanup+440>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7c8ec00 <_IO_cleanup+176>
mov    0xc0(%r15),%edx
test   %edx,%edx
je     0x7ffff7c8ec00 <_IO_cleanup+176>
mov    0x88(%r15),%rdx
test   %rdx,%rdx
je     0x7ffff7c8ec6e <_IO_cleanup+286>
mov    %fs:0x10,%rcx
cmp    0x8(%rdx),%rcx
je     0x7ffff7c8edd4 <_IO_cleanup+644>
mov    $0x1,%esi
xor    %eax,%eax
lock cmpxchg %esi,(%rdx)
jne    0x7ffff7c8ed87 <_IO_cleanup+567>
mov    0x88(%r15),%rax
mov    %rcx,0x8(%rax)
movl   $0x1,0x4(%rax)
cmpb   $0x0,0x18ddc3(%rip)        # 0x7ffff7e1ca38 <dealloc_buffers>
jne    0x7ffff7c8ec82 <_IO_cleanup+306>
mov    (%r15),%eax
test   $0x1,%al
je     0x7ffff7c8ed60 <_IO_cleanup+528>
movq   0x18dcc8(%rip),%xmm0        # 0x7ffff7e1ca30 <freeres_list>
or     $0x1,%eax
mov    %r15,0x18dcbe(%rip)        # 0x7ffff7e1ca30 <freeres_list>
mov    %eax,(%r15)
movhps 0x38(%r15),%xmm0
movups %xmm0,0xa8(%r15)
jmp    0x7ffff7c8ec82 <_IO_cleanup+306>
mov    0xd8(%r15),%rax
mov    %rax,%rdx
sub    %r13,%rdx
cmp    %rdx,%rbx
jbe    0x7ffff7c8edc0 <_IO_cleanup+624>
xor    %edx,%edx
xor    %esi,%esi
mov    %r15,%rdi
call   *0x58(%rax)
endbr64 
push   %rbx
mov    %rdi,%rbx
call   0x7ffff7c8e3b0 <_IO_default_setbuf>
endbr64 
push   %r13
lea    0x1893ab(%rip),%rax        # 0x7ffff7e17768
push   %r12
mov    %rdx,%r12
lea    0x188637(%rip),%rdx        # 0x7ffff7e16a00 <_IO_helper_jumps>
push   %rbp
sub    %rdx,%rax
mov    %rsi,%rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x8,%rsp
mov    0xd8(%rdi),%r13
mov    %r13,%rcx
sub    %rdx,%rcx
cmp    %rcx,%rax
jbe    0x7ffff7c8e490 <_IO_default_setbuf+224>
mov    %rbx,%rdi
call   *0x60(%r13)
endbr64 
push   %rbp
push   %rbx
mov    %rdi,%rbx
sub    $0x18,%rsp
mov    0x28(%rdi),%rdx
mov    0x20(%rdi),%rsi
cmp    %rsi,%rdx
jbe    0x7ffff7c8a473 <_IO_new_file_sync+67>
mov    0x8(%rbx),%rsi
sub    0x10(%rbx),%rsi
je     0x7ffff7c8a4bc <_IO_new_file_sync+140>
movq   $0xffffffffffffffff,0x90(%rbx)
xor    %eax,%eax
add    $0x18,%rsp
pop    %rbx
pop    %rbp
ret    
cmp    $0xffffffff,%eax
je     0x7ffff7c8e4a0 <_IO_default_setbuf+240>
mov    (%rbx),%edx
mov    0x38(%rbx),%rdi
mov    %edx,%eax
test   %rbp,%rbp
je     0x7ffff7c8e460 <_IO_default_setbuf+176>
or     $0x2,%eax
lea    0x84(%rbx),%r12
lea    0x83(%rbx),%rbp
mov    %eax,(%rbx)
test   %rdi,%rdi
je     0x7ffff7c8e422 <_IO_default_setbuf+114>
and    $0x1,%edx
jne    0x7ffff7c8e422 <_IO_default_setbuf+114>
movq   %rbp,%xmm0
movq   %r12,%xmm1
or     $0x1,%eax
punpcklqdq %xmm1,%xmm0
mov    %eax,(%rbx)
mov    %rbx,%rax
movups %xmm0,0x38(%rbx)
pxor   %xmm0,%xmm0
movups %xmm0,0x8(%rbx)
movups %xmm0,0x18(%rbx)
movups %xmm0,0x28(%rbx)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
test   %rax,%rax
je     0x7ffff7c8a5ca <_IO_new_file_setbuf+42>
movq   0x38(%rbx),%xmm0
mov    %rbx,%rax
punpcklqdq %xmm0,%xmm0
movups %xmm0,0x8(%rbx)
movups %xmm0,0x18(%rbx)
movups %xmm0,0x28(%rbx)
pop    %rbx
ret    
mov    0xc0(%r15),%eax
test   %eax,%eax
jle    0x7ffff7c8ecbb <_IO_cleanup+363>
cmp    $0x2,%r14d
je     0x7ffff7c8ec00 <_IO_cleanup+176>
mov    0x88(%r15),%rdi
test   %rdi,%rdi
je     0x7ffff7c8ec00 <_IO_cleanup+176>
mov    0x4(%rdi),%eax
sub    $0x1,%eax
mov    %eax,0x4(%rdi)
jne    0x7ffff7c8ec00 <_IO_cleanup+176>
movq   $0x0,0x8(%rdi)
xchg   %eax,(%rdi)
cmp    $0x1,%eax
jle    0x7ffff7c8ec00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ed08 <_IO_cleanup+440>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7c8ec00 <_IO_cleanup+176>
mov    0xc0(%r15),%edx
test   %edx,%edx
je     0x7ffff7c8ec00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7c8ed08 <_IO_cleanup+440>
mov    0x18dd46(%rip),%eax        # 0x7ffff7e1ca54 <list_all_lock+4>
sub    $0x1,%eax
mov    %eax,0x18dd3d(%rip)        # 0x7ffff7e1ca54 <list_all_lock+4>
test   %eax,%eax
jne    0x7ffff7c8ed31 <_IO_cleanup+481>
movq   $0x0,0x18dd32(%rip)        # 0x7ffff7e1ca58 <list_all_lock+8>
xchg   %eax,0x18dd24(%rip)        # 0x7ffff7e1ca50 <list_all_lock>
cmp    $0x1,%eax
jg     0x7ffff7c8edae <_IO_cleanup+606>
mov    %rbp,%rdi
call   0x7ffff7c91200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7c91228 <__GI___libc_cleanup_pop_restore+40>
ret    
mov    0x38(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7c8eddd <_IO_cleanup+653>
add    $0x48,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
add    $0x8,%rbx
cmp    %r12,%rbx
jb     0x7ffff7c45540 <__run_exit_handlers+432>
mov    %ebp,%edi
call   0x7ffff7ceac00 <__GI__exit>
endbr64 
mov    0x12f205(%rip),%r8        # 0x7ffff7e19e10
mov    $0xe7,%esi
mov    $0x3c,%edx
jmp    0x7ffff7ceac2d <__GI__exit+45>
mov    %esi,%eax
syscall 
