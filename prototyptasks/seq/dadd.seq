movsd  %xmm0,-0x18(%rbp)
movsd  0xec7(%rip),%xmm0        # 0x555555556010
movsd  %xmm0,-0x10(%rbp)
movsd  0xec2(%rip),%xmm0        # 0x555555556018
movsd  %xmm0,-0x8(%rbp)
pxor   %xmm1,%xmm1
cvtsi2sdl -0x24(%rbp),%xmm1
movsd  0xeb4(%rip),%xmm0        # 0x555555556020
mulsd  %xmm0,%xmm1
movsd  0x2ea0(%rip),%xmm0        # 0x555555558018 <instcnt>
addsd  %xmm1,%xmm0
movsd  %xmm0,0x2e94(%rip)        # 0x555555558018 <instcnt>
jmp    0x555555555341 <run_dadd+536>
mov    -0x24(%rbp),%eax
lea    -0x1(%rax),%edx
mov    %edx,-0x24(%rbp)
test   %eax,%eax
je     0x55555555535c <run_dadd+563>
mov    0x2ccc(%rip),%eax        # 0x555555558020 <done0>
test   %eax,%eax
je     0x555555555189 <run_dadd+96>
movsd  -0x18(%rbp),%xmm1
movsd  0xe92(%rip),%xmm0        # 0x555555556028
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xe84(%rip),%xmm0        # 0x555555556030
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xe76(%rip),%xmm0        # 0x555555556038
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xe68(%rip),%xmm0        # 0x555555556040
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xe5a(%rip),%xmm0        # 0x555555556048
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xe4c(%rip),%xmm0        # 0x555555556050
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xe3e(%rip),%xmm0        # 0x555555556058
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xe30(%rip),%xmm0        # 0x555555556060
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xe22(%rip),%xmm0        # 0x555555556068
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xe14(%rip),%xmm0        # 0x555555556070
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xdb6(%rip),%xmm0        # 0x555555556028
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xda8(%rip),%xmm0        # 0x555555556030
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xd9a(%rip),%xmm0        # 0x555555556038
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xd8c(%rip),%xmm0        # 0x555555556040
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xd7e(%rip),%xmm0        # 0x555555556048
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xd70(%rip),%xmm0        # 0x555555556050
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xd62(%rip),%xmm0        # 0x555555556058
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
movsd  -0x8(%rbp),%xmm1
movsd  0xd54(%rip),%xmm0        # 0x555555556060
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x8(%rbp)
movsd  -0x18(%rbp),%xmm1
movsd  0xd46(%rip),%xmm0        # 0x555555556068
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x18(%rbp)
movsd  -0x10(%rbp),%xmm1
movsd  0xd38(%rip),%xmm0        # 0x555555556070
addsd  %xmm1,%xmm0
movsd  %xmm0,-0x10(%rbp)
mov    -0x24(%rbp),%eax
lea    -0x1(%rax),%edx
mov    %edx,-0x24(%rbp)
test   %eax,%eax
je     0x55555555535c <run_dadd+563>
mov    $0x0,%eax
pop    %rbp
ret    
mov    $0x0,%eax
pop    %rbp
ret    
mov    %eax,%edi
call   0x7ffff7dd35f0 <__GI_exit>
endbr64 
push   %rax
pop    %rax
mov    $0x1,%ecx
mov    $0x1,%edx
lea    0x1d4231(%rip),%rsi        # 0x7ffff7fa7838 <__exit_funcs>
sub    $0x8,%rsp
call   0x7ffff7dd3390 <__run_exit_handlers>
endbr64 
push   %r15
push   %r14
push   %r13
push   %r12
mov    %rsi,%r12
push   %rbp
mov    %edi,%ebp
push   %rbx
sub    $0x28,%rsp
mov    %edx,0x1c(%rsp)
test   %cl,%cl
jne    0x7ffff7dd35c4 <__run_exit_handlers+564>
call   0x7ffff7dd3d60 <__GI___call_tls_dtors>
endbr64 
push   %rbp
push   %rbx
sub    $0x8,%rsp
mov    0x1d301f(%rip),%rbx        # 0x7ffff7fa6d90
mov    %fs:(%rbx),%rbp
test   %rbp,%rbp
je     0x7ffff7dd3dbd <__GI___call_tls_dtors+93>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
ret    
jmp    0x7ffff7dd33b3 <__run_exit_handlers+35>
lea    0x1d5b2e(%rip),%r14        # 0x7ffff7fa8ee8 <__exit_funcs_lock>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,(%r14)
jne    0x7ffff7dd35ce <__run_exit_handlers+574>
xor    %ebx,%ebx
mov    (%r12),%r15
test   %r15,%r15
je     0x7ffff7dd3510 <__run_exit_handlers+384>
nopl   0x0(%rax,%rax,1)
mov    0x8(%r15),%rax
test   %rax,%rax
je     0x7ffff7dd3500 <__run_exit_handlers+368>
sub    $0x1,%rax
mov    %rax,%rdx
mov    %rax,0x8(%r15)
shl    $0x5,%rdx
mov    0x10(%r15,%rdx,1),%rcx
cmp    $0x3,%rcx
je     0x7ffff7dd34b8 <__run_exit_handlers+296>
cmp    $0x4,%rcx
je     0x7ffff7dd3460 <__run_exit_handlers+208>
add    %r15,%rdx
mov    0x18(%rdx),%rax
mov    0x20(%rdx),%r13
movq   $0x0,0x10(%rdx)
mov    %ebx,%edx
ror    $0x11,%rax
xor    %fs:0x30,%rax
xchg   %edx,(%r14)
cmp    $0x1,%edx
jg     0x7ffff7dd35a0 <__run_exit_handlers+528>
mov    %ebp,%esi
mov    %r13,%rdi
call   *%rax
endbr64 
push   %rbp
mov    %rsp,%rbp
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbx
sub    $0x38,%rsp
mov    0x349e4(%rip),%r12        # 0x7ffff7ffda40 <_rtld_global+2560>
sub    $0x1,%r12
js     0x7ffff7fc9301 <_dl_fini+705>
movl   $0x0,-0x44(%rbp)
lea    0x349d4(%rip),%r13        # 0x7ffff7ffda48 <_rtld_global+2568>
lea    (%r12,%r12,4),%rbx
lea    0x33fc1(%rip),%rax        # 0x7ffff7ffd040 <_rtld_global>
shl    $0x5,%rbx
add    %rax,%rbx
jmp    0x7ffff7fc90ae <_dl_fini+110>
mov    %r13,%rdi
call   *0x339c9(%rip)        # 0x7ffff7ffca80 <___rtld_mutex_lock>
endbr64 
mov    0x10(%rdi),%eax
mov    %eax,%edx
and    $0x17f,%edx
nop
and    $0x7c,%eax
jne    0x7ffff7e25fb0 <___pthread_mutex_lock+192>
push   %rbx
sub    $0x10,%rsp
test   %edx,%edx
jne    0x7ffff7e25fb8 <___pthread_mutex_lock+200>
cmp    $0x100,%edx
je     0x7ffff7e25f96 <___pthread_mutex_lock+166>
mov    0x10(%rdi),%edx
and    $0x7f,%edx
cmp    $0x1,%edx
jne    0x7ffff7e26064 <___pthread_mutex_lock+372>
mov    %fs:0x2d0,%eax
cmp    %eax,0x8(%rdi)
jne    0x7ffff7e2600c <___pthread_mutex_lock+284>
mov    0x10(%rdi),%esi
and    $0x80,%esi
jne    0x7ffff7e26046 <___pthread_mutex_lock+342>
mov    %fs:0x18,%eax
test   %eax,%eax
jne    0x7ffff7e26046 <___pthread_mutex_lock+342>
mov    (%rdi),%edx
test   %edx,%edx
jne    0x7ffff7e26046 <___pthread_mutex_lock+342>
movl   $0x1,(%rdi)
mov    0x8(%rdi),%eax
test   %eax,%eax
jne    0x7ffff7e2616e <___pthread_mutex_lock+638>
movl   $0x1,0x4(%rdi)
jmp    0x7ffff7e25f55 <___pthread_mutex_lock+101>
mov    %fs:0x2d0,%eax
mov    %eax,0x8(%rdi)
addl   $0x1,0xc(%rdi)
nop
xor    %eax,%eax
add    $0x10,%rsp
pop    %rbx
ret    
mov    0x8(%rbx),%r15d
test   %r15d,%r15d
je     0x7ffff7fc9090 <_dl_fini+80>
mov    (%rbx),%rax
movzbl 0x31d(%rax),%eax
shr    $0x7,%al
movzbl %al,%eax
cmp    -0x44(%rbp),%eax
jne    0x7ffff7fc9090 <_dl_fini+80>
mov    $0x2,%esi
mov    %r12,%rdi
mov    %rsp,-0x58(%rbp)
call   0x7ffff7fde250 <_dl_audit_activity_nsid>
endbr64 
push   %r13
lea    (%rdi,%rdi,4),%rax
push   %r12
shl    $0x5,%rax
push   %rbp
lea    0x1edd8(%rip),%rbp        # 0x7ffff7ffd040 <_rtld_global>
push   %rbx
sub    $0x8,%rsp
mov    0x0(%rbp,%rax,1),%rbx
mov    0x1ec00(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %rbx,%rbx
je     0x7ffff7fde281 <_dl_audit_activity_nsid+49>
test   %eax,%eax
jne    0x7ffff7fde290 <_dl_audit_activity_nsid+64>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    %r15d,%eax
mov    %rsp,%rdx
lea    0xf(,%rax,8),%rax
shr    $0x4,%rax
shl    $0x4,%rax
mov    %rax,%rcx
and    $0xfffffffffffff000,%rcx
sub    %rcx,%rdx
cmp    %rdx,%rsp
je     0x7ffff7fc9123 <_dl_fini+227>
and    $0xfff,%eax
sub    %rax,%rsp
test   %rax,%rax
jne    0x7ffff7fc9333 <_dl_fini+755>
orq    $0x0,-0x8(%rsp,%rax,1)
jmp    0x7ffff7fc9134 <_dl_fini+244>
mov    (%rbx),%rax
mov    %rsp,%r14
xor    %esi,%esi
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %rax,0x28(%rax)
jne    0x7ffff7fc9148 <_dl_fini+264>
cmp    %esi,%r15d
jbe    0x7ffff7fc937e <_dl_fini+830>
mov    %esi,%edx
mov    %rax,(%r14,%rdx,8)
mov    %esi,0x3f4(%rax)
add    $0x1,%esi
addl   $0x1,0x318(%rax)
mov    0x18(%rax),%rax
test   %rax,%rax
jne    0x7ffff7fc9151 <_dl_fini+273>
cmp    %esi,%r15d
sete   %al
test   %r12,%r12
jne    0x7ffff7fc9192 <_dl_fini+338>
test   %al,%al
je     0x7ffff7fc93bc <_dl_fini+892>
test   %r12,%r12
sete   %dl
test   %al,%al
jne    0x7ffff7fc91ad <_dl_fini+365>
movzbl %dl,%edx
mov    $0x1,%ecx
mov    %r14,%rdi
mov    %esi,-0x38(%rbp)
call   0x7ffff7fd6730 <_dl_sort_maps>
endbr64 
push   %rbp
mov    %rdi,%r8
mov    %rsp,%rbp
push   %r15
push   %r14
push   %r13
push   %r12
push   %rbx
sub    $0x78,%rsp
mov    0x266b9(%rip),%r13d        # 0x7ffff7ffce08 <_rtld_global_ro+808>
mov    %cl,-0x51(%rbp)
test   %r13d,%r13d
jne    0x7ffff7fd69cd <_dl_sort_maps+669>
mov    %esi,%r9d
mov    %ecx,%eax
mov    %rsp,%rbx
shl    $0x3,%r9
sub    $0x1,%esi
movslq %esi,%rcx
js     0x7ffff7fd6b02 <_dl_sort_maps+978>
mov    %rcx,%rdx
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
mov    (%r8,%rdx,8),%rsi
sub    $0x1,%rdx
andb   $0xfe,0x31d(%rsi)
test   %edx,%edx
jns    0x7ffff7fd69e8 <_dl_sort_maps+696>
lea    0xf(%r9),%rdx
mov    %rsp,%rsi
shr    $0x4,%rdx
shl    $0x4,%rdx
mov    %rdx,%rdi
and    $0xfffffffffffff000,%rdi
sub    %rdi,%rsi
cmp    %rsi,%rsp
je     0x7ffff7fd6a31 <_dl_sort_maps+769>
and    $0xfff,%edx
sub    %rdx,%rsp
test   %rdx,%rdx
je     0x7ffff7fd6a45 <_dl_sort_maps+789>
orq    $0x0,-0x8(%rsp,%rdx,1)
mov    %rsp,%r11
test   %al,%al
lea    -0x41(%rbp),%r13
mov    $0x0,%eax
lea    (%r11,%r9,1),%rdx
movb   $0x0,-0x41(%rbp)
cmove  %rax,%r13
mov    %r11,%r14
mov    %rdx,-0x40(%rbp)
mov    %rcx,%r12
lea    -0x40(%rbp),%r15
mov    %rcx,%r10
jmp    0x7ffff7fd6a85 <_dl_sort_maps+853>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
mov    (%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7fd666b <dfs_traversal+75>
mov    $0x8,%ebx
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
sub    $0x1,%r10
test   %r10d,%r10d
js     0x7ffff7fd6b5f <_dl_sort_maps+1071>
mov    (%r8,%r10,8),%rsi
testb  $0x21,0x31d(%rsi)
jne    0x7ffff7fd6a9d <_dl_sort_maps+877>
mov    %r13,%rdx
mov    %r15,%rdi
call   0x7ffff7fd6620 <dfs_traversal>
push   %r13
mov    %rdi,%r13
push   %r12
mov    %rdx,%r12
push   %rbp
mov    %rsi,%rbp
push   %rbx
sub    $0x8,%rsp
mov    0x3d0(%rsi),%rax
orb    $0x1,0x31d(%rsi)
test   %rax,%rax
je     0x7ffff7fd666b <dfs_traversal+75>
mov    (%rax),%rsi
test   %rsi,%rsi
je     0x7ffff7fd666b <dfs_traversal+75>
mov    $0x8,%ebx
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
testw  $0x180,0x31c(%rsi)
je     0x7ffff7fd6690 <dfs_traversal+112>
mov    (%rax,%rbx,1),%rsi
add    $0x8,%rbx
test   %rsi,%rsi
jne    0x7ffff7fd6653 <dfs_traversal+51>
test   %r12,%r12
jne    0x7ffff7fd66b0 <dfs_traversal+144>
mov    0x3d8(%rbp),%rax
test   %rax,%rax
je     0x7ffff7fd6670 <dfs_traversal+80>
mov    0x0(%r13),%rax
lea    -0x8(%rax),%rdx
mov    %rdx,0x0(%r13)
mov    %rbp,-0x8(%rax)
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
cmp    -0x40(%rbp),%r11
jne    0x7ffff7fd6a78 <_dl_sort_maps+840>
cmpb   $0x0,-0x41(%rbp)
je     0x7ffff7fd6b7e <_dl_sort_maps+1102>
mov    %r9,%rdx
mov    %r14,%rsi
mov    %r8,%rdi
call   0x7ffff7fedfb0 <memmove>
endbr64 
mov    %rdi,%rax
cmp    $0x10,%rdx
jb     0x7ffff7fedfe0 <memmove+48>
movups (%rsi),%xmm0
cmp    $0x20,%rdx
ja     0x7ffff7fee040 <memmove+144>
movups -0x10(%rsi,%rdx,1),%xmm1
movups %xmm0,(%rdi)
movups %xmm1,-0x10(%rdi,%rdx,1)
ret    
jmp    0x7ffff7fd6afa <_dl_sort_maps+970>
mov    %rbx,%rsp
jmp    0x7ffff7fd6870 <_dl_sort_maps+320>
lea    -0x28(%rbp),%rsp
pop    %rbx
pop    %r12
pop    %r13
pop    %r14
pop    %r15
pop    %rbp
ret    
mov    %r13,%rdi
call   *0x338af(%rip)        # 0x7ffff7ffca78 <___rtld_mutex_unlock>
endbr64 
mov    0x10(%rdi),%eax
mov    %eax,%edx
and    $0x17f,%edx
and    $0x7c,%eax
jne    0x7ffff7e27ad0 <___pthread_mutex_unlock+96>
sub    $0x18,%rsp
test   %edx,%edx
jne    0x7ffff7e27ae0 <___pthread_mutex_unlock+112>
cmp    $0x100,%edx
jne    0x7ffff7e27b17 <___pthread_mutex_unlock+167>
mov    0x10(%rdi),%ecx
and    $0x7f,%ecx
cmp    $0x1,%ecx
jne    0x7ffff7e27b48 <___pthread_mutex_unlock+216>
mov    %fs:0x2d0,%edx
cmp    %edx,0x8(%rdi)
je     0x7ffff7e27b39 <___pthread_mutex_unlock+201>
subl   $0x1,0x4(%rdi)
jne    0x7ffff7e27aac <___pthread_mutex_unlock+60>
jmp    0x7ffff7e27a8c <___pthread_mutex_unlock+28>
subl   $0x1,0xc(%rdi)
movl   $0x0,0x8(%rdi)
mov    0x10(%rdi),%esi
and    $0x80,%esi
je     0x7ffff7e27ab8 <___pthread_mutex_unlock+72>
mov    %fs:0x18,%edx
test   %edx,%edx
jne    0x7ffff7e27aa2 <___pthread_mutex_unlock+50>
movl   $0x0,(%rdi)
jmp    0x7ffff7e27aab <___pthread_mutex_unlock+59>
nop
add    $0x18,%rsp
ret    
mov    -0x38(%rbp),%esi
test   %esi,%esi
je     0x7ffff7fc9292 <_dl_fini+594>
lea    -0x1(%rsi),%eax
lea    0x8(%r14,%rax,8),%rax
mov    %rax,-0x50(%rbp)
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
testb  $0x2,0x338cc(%rip)        # 0x7ffff7ffcae0 <_rtld_global_ro>
jne    0x7ffff7fc92c0 <_dl_fini+640>
mov    0x8(%rax),%rax
add    (%r15),%rax
mov    %rax,%rsi
mov    %rax,-0x40(%rbp)
mov    0x120(%r15),%rax
mov    0x8(%rax),%rdx
shr    $0x3,%rdx
lea    -0x1(%rdx),%eax
lea    (%rsi,%rax,8),%rax
test   %edx,%edx
je     0x7ffff7fc925f <_dl_fini+543>
nopw   0x0(%rax,%rax,1)
mov    %rax,-0x38(%rbp)
call   *(%rax)
endbr64 
cmpb   $0x0,0x2f25(%rip)        # 0x555555558010 <completed.0>
jne    0x555555555118 <__do_global_dtors_aux+56>
push   %rbp
cmpq   $0x0,0x2f02(%rip)        # 0x555555557ff8
mov    %rsp,%rbp
je     0x555555555107 <__do_global_dtors_aux+39>
mov    0x2f06(%rip),%rdi        # 0x555555558008
call   0x555555555030 <__cxa_finalize@plt>
endbr64 
bnd jmp *0x2fbd(%rip)        # 0x555555557ff8
endbr64 
push   %r15
xor    %eax,%eax
mov    $0x1,%edx
push   %r14
push   %r13
push   %r12
mov    %rdi,%r12
push   %rbp
push   %rbx
sub    $0x18,%rsp
lea    0x1d5525(%rip),%r13        # 0x7ffff7fa8ee8 <__exit_funcs_lock>
lock cmpxchg %edx,0x0(%r13)
jne    0x7ffff7dd3c13 <__cxa_finalize+627>
nop
mov    0x1d3e61(%rip),%r14        # 0x7ffff7fa7838 <__exit_funcs>
test   %r14,%r14
je     0x7ffff7dd3a8c <__cxa_finalize+236>
mov    0x8(%r14),%rax
lea    0x10(%r14),%rbp
shl    $0x5,%rax
lea    -0x10(%r14,%rax,1),%rbx
cmp    %rbp,%rbx
jb     0x7ffff7dd3a80 <__cxa_finalize+224>
mov    (%r14),%r14
test   %r14,%r14
jne    0x7ffff7dd39e0 <__cxa_finalize+64>
mov    0x1d3dad(%rip),%rcx        # 0x7ffff7fa7840 <__quick_exit_funcs>
test   %rcx,%rcx
je     0x7ffff7dd3ade <__cxa_finalize+318>
nopl   0x0(%rax,%rax,1)
mov    0x8(%rcx),%rax
lea    0x10(%rcx),%rdx
shl    $0x5,%rax
lea    -0x10(%rcx,%rax,1),%rax
cmp    %rax,%rdx
ja     0x7ffff7dd3ad6 <__cxa_finalize+310>
mov    (%rcx),%rcx
test   %rcx,%rcx
jne    0x7ffff7dd3aa0 <__cxa_finalize+256>
test   %r12,%r12
je     0x7ffff7dd3aeb <__cxa_finalize+331>
mov    %r12,%rdi
call   0x7ffff7e78dd0 <__unregister_atfork>
endbr64 
push   %rbx
xor    %eax,%eax
mov    %rdi,%rbx
mov    $0x1,%edx
lock cmpxchg %edx,0x135cd9(%rip)        # 0x7ffff7faeac0 <atfork_lock>
jne    0x7ffff7e78ee0 <__unregister_atfork+272>
mov    0x135cec(%rip),%rsi        # 0x7ffff7faeae0 <fork_handlers>
test   %rsi,%rsi
je     0x7ffff7e78eb0 <__unregister_atfork+224>
xor    %eax,%eax
xchg   %eax,0x135c08(%rip)        # 0x7ffff7faeac0 <atfork_lock>
cmp    $0x1,%eax
jg     0x7ffff7e78ed0 <__unregister_atfork+256>
pop    %rbx
ret    
xor    %eax,%eax
xchg   %eax,0x0(%r13)
cmp    $0x1,%eax
jg     0x7ffff7dd3c20 <__cxa_finalize+640>
add    $0x18,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
call   0x555555555070 <deregister_tm_clones>
lea    0x2f99(%rip),%rdi        # 0x555555558010 <completed.0>
lea    0x2f92(%rip),%rax        # 0x555555558010 <completed.0>
cmp    %rdi,%rax
je     0x555555555098 <deregister_tm_clones+40>
ret    
movb   $0x1,0x2efd(%rip)        # 0x555555558010 <completed.0>
pop    %rbp
ret    
mov    -0x38(%rbp),%rax
mov    %rax,%rdx
sub    $0x8,%rax
cmp    %rdx,-0x40(%rbp)
jne    0x7ffff7fc9248 <_dl_fini+520>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    0x8(%rax),%rax
add    (%r15),%rax
call   *%rax
endbr64 
sub    $0x8,%rsp
add    $0x8,%rsp
ret    
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
mov    (%r14),%r15
movzbl 0x31c(%r15),%eax
test   $0x8,%al
je     0x7ffff7fc927c <_dl_fini+572>
and    $0xfffffff7,%eax
mov    %al,0x31c(%r15)
mov    0x110(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc92a8 <_dl_fini+616>
mov    0xa8(%r15),%rax
test   %rax,%rax
je     0x7ffff7fc9274 <_dl_fini+564>
mov    %r15,%rdi
call   0x7ffff7fde570 <_dl_audit_objclose>
endbr64 
mov    0x1e8fe(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fde580 <_dl_audit_objclose+16>
ret    
subl   $0x1,0x318(%r15)
add    $0x8,%r14
cmp    %r14,-0x50(%rbp)
jne    0x7ffff7fc91e0 <_dl_fini+416>
xor    %esi,%esi
mov    %r12,%rdi
call   0x7ffff7fde250 <_dl_audit_activity_nsid>
endbr64 
push   %r13
lea    (%rdi,%rdi,4),%rax
push   %r12
shl    $0x5,%rax
push   %rbp
lea    0x1edd8(%rip),%rbp        # 0x7ffff7ffd040 <_rtld_global>
push   %rbx
sub    $0x8,%rsp
mov    0x0(%rbp,%rax,1),%rbx
mov    0x1ec00(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %rbx,%rbx
je     0x7ffff7fde281 <_dl_audit_activity_nsid+49>
test   %eax,%eax
jne    0x7ffff7fde290 <_dl_audit_activity_nsid+64>
add    $0x8,%rsp
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
ret    
mov    -0x58(%rbp),%rsp
jmp    0x7ffff7fc9099 <_dl_fini+89>
sub    $0x1,%r12
sub    $0xa0,%rbx
cmp    $0xffffffffffffffff,%r12
je     0x7ffff7fc92f0 <_dl_fini+688>
mov    -0x44(%rbp),%edx
test   %edx,%edx
jne    0x7ffff7fc9301 <_dl_fini+705>
mov    0x33b7b(%rip),%eax        # 0x7ffff7ffce78 <_rtld_global_ro+920>
test   %eax,%eax
jne    0x7ffff7fc933e <_dl_fini+766>
testb  $0x80,0x337d8(%rip)        # 0x7ffff7ffcae0 <_rtld_global_ro>
jne    0x7ffff7fc9360 <_dl_fini+800>
lea    -0x28(%rbp),%rsp
pop    %rbx
pop    %r12
pop    %r13
pop    %r14
pop    %r15
pop    %rbp
ret    
mov    $0x1,%edx
mov    %ebx,%eax
lock cmpxchg %edx,(%r14)
je     0x7ffff7dd33e0 <__run_exit_handlers+80>
mov    0x8(%r15),%rax
test   %rax,%rax
je     0x7ffff7dd3500 <__run_exit_handlers+368>
mov    (%r15),%rax
mov    %rax,(%r12)
test   %rax,%rax
jne    0x7ffff7dd35b7 <__run_exit_handlers+551>
movb   $0x1,0x1d59b5(%rip)        # 0x7ffff7fa8ecc <__exit_funcs_done>
xor    %eax,%eax
xchg   %eax,(%r14)
cmp    $0x1,%eax
jg     0x7ffff7dd35db <__run_exit_handlers+587>
cmpb   $0x0,0x1c(%rsp)
je     0x7ffff7dd354b <__run_exit_handlers+443>
lea    0x1d04c5(%rip),%rbx        # 0x7ffff7fa39f8 <__elf_set___libc_atexit_element__IO_cleanup__>
lea    0x1d04c6(%rip),%r12        # 0x7ffff7fa3a00 <_IO_helper_jumps>
cmp    %r12,%rbx
jae    0x7ffff7dd354b <__run_exit_handlers+443>
nop
call   *(%rbx)
endbr64 
push   %r15
xor    %edi,%edi
push   %r14
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x48,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x38(%rsp)
xor    %eax,%eax
lea    0x10(%rsp),%rbp
call   0x7ffff7e1c8e0 <_IO_flush_all_lockp>
endbr64 
push   %r15
push   %r14
mov    %edi,%r14d
push   %r13
push   %r12
push   %rbp
push   %rbx
sub    $0x48,%rsp
mov    %fs:0x28,%rax
mov    %rax,0x38(%rsp)
xor    %eax,%eax
lea    0x10(%rsp),%r13
lea    -0x1931(%rip),%rax        # 0x7ffff7e1afe0 <flush_cleanup>
movq   $0x0,0x18(%rsp)
mov    %r13,%rdi
mov    %rax,0x10(%rsp)
call   0x7ffff7e1f1c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%rbx
cmp    %rbx,0x18d121(%rip)        # 0x7ffff7fa9a58 <list_all_lock+8>
je     0x7ffff7e1c955 <_IO_flush_all_lockp+117>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,0x18d108(%rip)        # 0x7ffff7fa9a50 <list_all_lock>
jne    0x7ffff7e1cafc <_IO_flush_all_lockp+540>
mov    %rbx,0x18d103(%rip)        # 0x7ffff7fa9a58 <list_all_lock+8>
mov    0x18d0f9(%rip),%eax        # 0x7ffff7fa9a54 <list_all_lock+4>
mov    0x18bd1e(%rip),%r15        # 0x7ffff7fa8680 <_IO_list_all>
xor    %r12d,%r12d
lea    0x1(%rax),%edx
mov    %edx,0x18d0e6(%rip)        # 0x7ffff7fa9a54 <list_all_lock+4>
test   %r15,%r15
je     0x7ffff7e1ca99 <_IO_flush_all_lockp+441>
lea    0x187082(%rip),%rbp        # 0x7ffff7fa3a00 <_IO_helper_jumps>
lea    0x187de3(%rip),%rbx        # 0x7ffff7fa4768
sub    %rbp,%rbx
jmp    0x7ffff7e1ca1c <_IO_flush_all_lockp+316>
mov    %r15,0x18d01d(%rip)        # 0x7ffff7fa9a40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7e1ca66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7e1c990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7e1c9a1 <_IO_flush_all_lockp+193>
jmp    0x7ffff7e1c9ce <_IO_flush_all_lockp+238>
test   %r14d,%r14d
je     0x7ffff7e1ca08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18d02d(%rip)        # 0x7ffff7fa9a40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1ca90 <_IO_flush_all_lockp+432>
mov    %r15,0x18d01d(%rip)        # 0x7ffff7fa9a40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7e1ca66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7e1c990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7e1c9a1 <_IO_flush_all_lockp+193>
jmp    0x7ffff7e1c9ce <_IO_flush_all_lockp+238>
test   %r14d,%r14d
je     0x7ffff7e1ca08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18d02d(%rip)        # 0x7ffff7fa9a40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1ca90 <_IO_flush_all_lockp+432>
mov    %r15,0x18d01d(%rip)        # 0x7ffff7fa9a40 <run_fp>
test   %r14d,%r14d
je     0x7ffff7e1ca66 <_IO_flush_all_lockp+390>
mov    0xc0(%r15),%eax
test   %eax,%eax
jg     0x7ffff7e1c990 <_IO_flush_all_lockp+176>
mov    0x20(%r15),%rax
cmp    %rax,0x28(%r15)
ja     0x7ffff7e1c9a1 <_IO_flush_all_lockp+193>
jmp    0x7ffff7e1c9ce <_IO_flush_all_lockp+238>
test   %r14d,%r14d
je     0x7ffff7e1ca08 <_IO_flush_all_lockp+296>
movq   $0x0,0x18d02d(%rip)        # 0x7ffff7fa9a40 <run_fp>
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1ca90 <_IO_flush_all_lockp+432>
mov    0x18cfbe(%rip),%eax        # 0x7ffff7fa9a54 <list_all_lock+4>
sub    $0x1,%eax
mov    %eax,0x18cfb5(%rip)        # 0x7ffff7fa9a54 <list_all_lock+4>
test   %eax,%eax
jne    0x7ffff7e1cab9 <_IO_flush_all_lockp+473>
movq   $0x0,0x18cfaa(%rip)        # 0x7ffff7fa9a58 <list_all_lock+8>
xchg   %eax,0x18cf9c(%rip)        # 0x7ffff7fa9a50 <list_all_lock>
cmp    $0x1,%eax
jg     0x7ffff7e1cb0d <_IO_flush_all_lockp+557>
mov    %r13,%rdi
call   0x7ffff7e1f200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7e1f228 <__GI___libc_cleanup_pop_restore+40>
ret    
mov    0x38(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7e1cb42 <_IO_flush_all_lockp+610>
add    $0x48,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
mov    %rbp,%rdi
movq   $0x0,0x18(%rsp)
mov    %eax,%r12d
lea    -0x1bb4(%rip),%rax        # 0x7ffff7e1afe0 <flush_cleanup>
mov    %rax,0x10(%rsp)
call   0x7ffff7e1f1c0 <__GI___libc_cleanup_push_defer>
endbr64 
mov    %fs:0x2f8,%rax
mov    %rax,0x18(%rdi)
xor    %eax,%eax
mov    %fs:0x972,%al
movzbl %al,%eax
mov    %eax,0x10(%rdi)
movb   $0x0,%fs:0x972
mov    %rdi,%fs:0x2f8
ret    
mov    %fs:0x10,%rbx
cmp    0x18ceaa(%rip),%rbx        # 0x7ffff7fa9a58 <list_all_lock+8>
je     0x7ffff7e1cbcc <_IO_cleanup+124>
xor    %eax,%eax
mov    $0x1,%edx
lock cmpxchg %edx,0x18ce91(%rip)        # 0x7ffff7fa9a50 <list_all_lock>
jne    0x7ffff7e1cd9d <_IO_cleanup+589>
mov    %rbx,0x18ce8c(%rip)        # 0x7ffff7fa9a58 <list_all_lock+8>
mov    0x18ce82(%rip),%eax        # 0x7ffff7fa9a54 <list_all_lock+4>
mov    0x18baa7(%rip),%r15        # 0x7ffff7fa8680 <_IO_list_all>
lea    0x1(%rax),%edx
mov    %edx,0x18ce72(%rip)        # 0x7ffff7fa9a54 <list_all_lock+4>
test   %r15,%r15
je     0x7ffff7e1cd11 <_IO_cleanup+449>
lea    0x186e0e(%rip),%r13        # 0x7ffff7fa3a00 <_IO_helper_jumps>
lea    0x187b6f(%rip),%rbx        # 0x7ffff7fa4768
sub    %r13,%rbx
jmp    0x7ffff7e1cc18 <_IO_cleanup+200>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7e1cc00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1cd08 <_IO_cleanup+440>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7e1cc00 <_IO_cleanup+176>
mov    0xc0(%r15),%edx
test   %edx,%edx
je     0x7ffff7e1cc00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1cd08 <_IO_cleanup+440>
mov    (%r15),%r14d
and    $0x2,%r14d
jne    0x7ffff7e1cc00 <_IO_cleanup+176>
mov    0xc0(%r15),%edx
test   %edx,%edx
je     0x7ffff7e1cc00 <_IO_cleanup+176>
movl   $0xffffffff,0xc0(%r15)
mov    0x68(%r15),%r15
test   %r15,%r15
je     0x7ffff7e1cd08 <_IO_cleanup+440>
mov    0x18cd46(%rip),%eax        # 0x7ffff7fa9a54 <list_all_lock+4>
sub    $0x1,%eax
mov    %eax,0x18cd3d(%rip)        # 0x7ffff7fa9a54 <list_all_lock+4>
test   %eax,%eax
jne    0x7ffff7e1cd31 <_IO_cleanup+481>
movq   $0x0,0x18cd32(%rip)        # 0x7ffff7fa9a58 <list_all_lock+8>
xchg   %eax,0x18cd24(%rip)        # 0x7ffff7fa9a50 <list_all_lock>
cmp    $0x1,%eax
jg     0x7ffff7e1cdae <_IO_cleanup+606>
mov    %rbp,%rdi
call   0x7ffff7e1f200 <__GI___libc_cleanup_pop_restore>
endbr64 
mov    0x18(%rdi),%rax
mov    %rax,%fs:0x2f8
mov    0x10(%rdi),%eax
mov    %al,%fs:0x972
cmp    $0x1,%eax
je     0x7ffff7e1f228 <__GI___libc_cleanup_pop_restore+40>
ret    
mov    0x38(%rsp),%rax
sub    %fs:0x28,%rax
jne    0x7ffff7e1cddd <_IO_cleanup+653>
add    $0x48,%rsp
mov    %r12d,%eax
pop    %rbx
pop    %rbp
pop    %r12
pop    %r13
pop    %r14
pop    %r15
ret    
add    $0x8,%rbx
cmp    %r12,%rbx
jb     0x7ffff7dd3540 <__run_exit_handlers+432>
mov    %ebp,%edi
call   0x7ffff7e78c00 <__GI__exit>
endbr64 
mov    0x12e205(%rip),%r8        # 0x7ffff7fa6e10
mov    $0xe7,%esi
mov    $0x3c,%edx
jmp    0x7ffff7e78c2d <__GI__exit+45>
mov    %esi,%eax
syscall 
